<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reki家地下的大书架</title>
  
  <subtitle>ん…？べ、別に退屈とかしてないし…。してないんだから！ホントよ？</subtitle>
  <link href="https://blog.rekidunois.cc/atom.xml" rel="self"/>
  
  <link href="https://blog.rekidunois.cc/"/>
  <updated>2021-07-06T13:16:05.453Z</updated>
  <id>https://blog.rekidunois.cc/</id>
  
  <author>
    <name>Reki Dunois</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020(财)年的总结</title>
    <link href="https://blog.rekidunois.cc/2021/07/end-of-2020-2021/"/>
    <id>https://blog.rekidunois.cc/2021/07/end-of-2020-2021/</id>
    <published>2021-07-06T11:05:22.937Z</published>
    <updated>2021-07-06T13:16:05.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>本来我是打算过年的时候写一写年终总结，可是一过年啥都忘记了，现在才想起来有这么一回事。于是年终总结就变成了财年总结，还得带上一季度一起写（逃）。</p><h2 id="2020-农历新年后"><a href="#2020-农历新年后" class="headerlink" title="2020 农历新年后"></a>2020 农历新年后</h2><p>去年的新年是非常难忘的，全国上下进入了一种以前从未有过的状态。03 年非典的时候，我老家县城里并没有任何一例确诊病例，所以当时的我对于这场疫情的了解仅限于新闻和学校里讲卫生勤洗手的宣传而已。所以我们一直以为，老家是个福地，纵然和其他城市的人员交流并不少，但是总是很难在这种传染病疫情中遭受沉重的打击。</p><p>结果在新冠肺炎的疫情中，所有人都开始减少外出，取消了过年期间的走亲戚计划。在通了高铁之后，我们也在高铁上发现了小地方的第一例确诊病例。于是一车人都被拉去医院进行了隔离。除此之外，肺炎并未太多地在这里传染。</p><p>于是我很开心地能够不去走亲戚，能名正言顺地宅在家里。疫情期间我趁打折买了群星，一直玩到了怪物猎人冰原 dlc 的发布。但是突然发现自己并没有带手柄回老家，于是一咬牙，下单了微软精英手柄二代，然后趁着春节假期的延长，肝了一个多星期的冰原。</p><h2 id="头一次的居家工作体验"><a href="#头一次的居家工作体验" class="headerlink" title="头一次的居家工作体验"></a>头一次的居家工作体验</h2><p>随着时间的推移，确诊病例逐渐被控制下来，好消息越来越多。春节假期的结束也意味着有序返工的序幕被拉开。最开始的政策是能远程办公的公司尽量远程，不能远程的公司，则必须提供必须的防疫物资。比方说为员工提供口罩，每日体温检测，消毒水等。</p><p>我司一部分的工作确实是可以远程办公的。但是也有相当一部分的工作因为需要特定的设备而无法远程工作。解决方案就是本地的员工不得不现场上班，当远程工作人员有需要时，帮助他们操作设备。</p><p>与此同时，我司开始使用飞书作为内部沟通 IM，而且养成了每天早上语音开早会的习惯。虽然这一段早会基本上来说和我都没有太大关系，那时候我负责的业务还不是很多。</p><p>这一段时间对我来说是非常舒服的。以前我需求不饱和的时候，我只能发呆。因为干别的事情要被 hr 烦。而居家工作如果没事可做我就直接开一局冰原，神清气爽。</p><p>而且减掉了通勤时间之后，我开始自己做饭。一开始做的确实是乱七八糟，后来渐渐摸到了一些门道，总算是能做出能吃的东西了。但我后来还是放弃了自己做饭，主要就是因为耗时太多了。两餐饭一荤一素要用掉我将近一个小时的时间。本来我下班之后自由时间就不算多，一个小时的做饭时间根本没法接受。</p><h2 id="复工以后"><a href="#复工以后" class="headerlink" title="复工以后"></a>复工以后</h2><p>鉴于我司的工作需要特定设备才能进行，所以在居家工作两周之后，我们还是返回了办公室。而这个时候，这边已经有段时间没有出现新增病例了。公司为每个人都提供了免费的口罩和消毒水，还购置了体温枪每天测量体温。我一开始为了不想天天换口罩很麻烦，去京东买了个防毒面具，搞得和路霸一样。但是体验其实比医用口罩要好很多，因为眼镜上不会起雾。所以 lg 和雷蛇要推出的那种电动口罩我也有点想买的。当然后来因为太热了所以我还是换成了一次性口罩。</p><p>复工之后其实也没有特别多的变化，我自己做饭坚持了一个月不到吧，就决定还是吃外卖方便一点了。</p><h2 id="渐入佳境"><a href="#渐入佳境" class="headerlink" title="渐入佳境"></a>渐入佳境</h2><p>搜索新年之后的需求其实不多。我记得这段时间买了蓝牙键盘和蓝牙鼠标，我过起了一边肝 fgo 和 wows 一边补番的生活。这个时候我的社交重心慢慢转移到了电报群，QQ 的很多大学时代的朋友联系的都少了。当然，现在又和他们联系的多了，这是后话。</p><p>这段时间，我觉得我对公司项目结构的把握能力更上一层楼了。再也不会出现加了个文件就编译不过的低级错误，整个项目我已经可以操控自如了。</p><p>在后半年，主要的学习其实集中在了计算机科学方面。去看了 csapp 以及编译原理的网课，但是并没有完全看完。这些知识其实说枯燥也不枯燥，就是没什么参与感。我觉得我学习任何知识，还是能有办法实际操作的情况下会学的快一点。</p><h2 id="消费降级"><a href="#消费降级" class="headerlink" title="消费降级"></a>消费降级</h2><p>虽然经历了两次涨工资，但是我的存款其实并没有增长很多。所以慢慢对仅有的东西进行一些规划，比方说丢到收益率高一点的基金里，每个月都确认当月的消费，对消费总量进行降级。</p><p>我发现如果对整个月的收入和支出有一个大概的理解，平时花钱就不会大手大脚了。总的来说就是知道自己每个月还能剩下多少钱，然后按照我的仓鼠习性，只要总量在下降就会产生不安的感觉，然后就开始减少消费，整个总量就开始下降了。</p><p>然而 2020 年，氪金的大头还是给了 wows。我不知道时至今日我为啥还要玩这个游戏，但是那时候从一个个起火牌子上我可能确实是获得了相当的快感。买了挺多船的，但最后玩的最多的还是吾妻。</p><p>结果到 2020 年年末，我最终还是入坑了方舟，并且花的钱也不在少数。方舟应该是我第一个氪的这么多的手游，应该说一个塔防游戏还是深得我心的。</p><p>而其他的大笔支出，应该就只有红米 K30U 了。关于这个可以看一下我频道里的<a href="https://t.me/RekiChannel/6269">简单总结</a>。写这篇总结的时候我已经用了很长一段时间了，考虑写一个更详细一点的体验。</p><h2 id="新的一年"><a href="#新的一年" class="headerlink" title="新的一年"></a>新的一年</h2><p>虽然都说新年新气象，但是从 19 年底开始的疫情其实尚未结束。即使是写这篇总结的现在，大陆依旧有海外输入性病例变成局部爆发的例子。而海外更加严重，由于 Delta 变异毒株在传播力上与现存疫苗研发时的病毒毒株相比增强了很多，再加上更多的变异毒株出现了免疫逃逸的现象，即使是疫苗接种率非常高的以色列，也开始了新一轮的疫情。整个世界的氛围实际上和 2020 年大同小异。</p><p>而在这样的背景之下，各地相继发出了「原地过年」的号召。特别是有疫情中风险地区存在的地区。导致我这一年买春运火车票非常容易。虽然我很期待头一次在外过年，不过深圳当时并没有中风险以上的地区，所以我还是乖乖回去过年了。</p><p>基本恢复正常的新年之后，生活也慢慢恢复了正常。</p><h3 id="健康问题"><a href="#健康问题" class="headerlink" title="健康问题"></a>健康问题</h3><p>过年之后，我去进行了差不多五年没有进行的体检（我司居然不要求入职体检）。我以为结果会很糟糕，但是没想到那么糟糕。</p><p>首先是中度脂肪肝。所有的医生看到这个问题之后都在劝我不要喝酒。我真的冤枉，我活到现在，除了尝鲜以外基本是滴酒不沾的。然而还是脂肪肝了，证明过去几年的饮食相当不健康。</p><p>其次是 34% 的体脂率。这实在是太过分了。BMI 也到了一个无法忍受的地步。</p><p>最后是过高的尿酸。这个我是怎么都没想到的。因为尿酸这个东西基本和海鲜有关系，但是鱼我一向是很好吃的。然后医生认为我可能是夜宵吃的多。但是在仔细思考之后，我发现早餐豆浆喝多了也可能导致尿酸。还有饮水不足也可能是一大原因。</p><p>在这个情况下，我开始增加使用健身环的次数，并且基本戒掉了含糖的饮料。作用还是非常大的，体重在一两个月之内就下降了将近 6kg。希望我能在接下来的一年坚持减脂，明年体检的时候一定要甩掉脂肪肝、高体脂和高尿酸的问题。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>从开始想要写总结的过年，到第一季度结束真正开始动笔，到现在 2021 年过半了，我总算是基本完成了这一篇 2020 年和 2021 年前半的总结。</p><p>头一次写类似的东西，我应该还有很多好写但是没有写出来的。希望 2021 年接下来的时间能够创造更多值得一写的回忆吧。</p>]]></content>
    
    
    <summary type="html">人类的本质是咕咕咕</summary>
    
    
    
    <category term="阶段总结" scheme="https://blog.rekidunois.cc/categories/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="生活" scheme="https://blog.rekidunois.cc/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="年终总结" scheme="https://blog.rekidunois.cc/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Notion 随笔集合（一）</title>
    <link href="https://blog.rekidunois.cc/2020/12/Notion-Nonsense-EP1/"/>
    <id>https://blog.rekidunois.cc/2020/12/Notion-Nonsense-EP1/</id>
    <published>2020-12-09T12:02:48.124Z</published>
    <updated>2021-07-06T13:16:32.906Z</updated>
    
    <content type="html"><![CDATA[<p>今年某个时候决定开始使用 Notion，它有一个非常爽的功能就是可以直接将网页的内容保存到你的 Notion 笔记里。所以很方便用来做笔记，也很方便写些什么。</p><p>我发现自己标注为随笔的一个页面已经写了不少东西了，决定整理一下发到博客里（主要是想水博客）</p><h2 id="Notion-小记"><a href="#Notion-小记" class="headerlink" title="Notion 小记"></a>Notion 小记</h2><p>唯一的遗憾就是无法离线你的笔记。昨天我家里网络有点问题，所以很多东西都不能传上去或者修改之类的。其他的地方我觉得都非常好。</p><p>再研究一下模板之类的怎么用，然后看看有没有必要付费使用。我觉得 VS Code 要做到 Notion 这样的效果还需要专门的插件才能做到。</p><p>当然 Notion 自己也没有插件这样的东西，也有一些需求</p><blockquote><p>评论：这后面是不是有什么话没说完？</p></blockquote><h2 id="20200810"><a href="#20200810" class="headerlink" title="20200810"></a>20200810</h2><p>看起来，Windows上的程序主窗口一个必须要做的事情就是客制化边框、标题栏和右上角的三个按钮，不然内里的UI做的再精美，整个软件的档次感觉就下降了（潜台词就是默认边框丑）</p><blockquote><p>评论：看起来并不是按照时间排列的<br>以及：其实很多软件都只是停留在做自己的标题栏，并没有给边框增加圆角。</p></blockquote><h2 id="Notion的网络…"><a href="#Notion的网络…" class="headerlink" title="Notion的网络…"></a>Notion的网络…</h2><p>桌面的软件不知道为什么总是会上传失败，不管是文件还是图片。</p><p>后来我发现网页版也还行，并且没有这个问题，看来还是要用网页版。</p><p>看看能不能安装网页app</p><blockquote><p>评论：结果现在都是用网页然后安装成应用在用了。但是网络确实非常慢，只是好歹能用</p></blockquote><h2 id="2020年8月13日"><a href="#2020年8月13日" class="headerlink" title="2020年8月13日"></a>2020年8月13日</h2><p>优质键政是很能引人思考引人向上的力量。</p><p>劣质键政还不如打游戏，对喷键政不如打游戏对喷。</p><blockquote><p>评论：劣质键政容易让人睡不着觉</p></blockquote><h2 id="2020年8月16日"><a href="#2020年8月16日" class="headerlink" title="2020年8月16日"></a>2020年8月16日</h2><p>还是太菜了，菜到连公司都看不下去了。</p><p>当然准时下班是少不了的。所以以后要经常把电脑带回家，现在还不到我回家就玩游戏的时候，还是要多练习代码才能以后天天玩游戏。</p><p>不过最近是真的忙。</p><blockquote><p>评论：其实我自己学的东西真的很少有东西能应用到工作中来，毕竟公司用的是 2013 年的东西（</p></blockquote><h2 id="2020年8月18日"><a href="#2020年8月18日" class="headerlink" title="2020年8月18日"></a>2020年8月18日</h2><p>原来三湾改编的内容如此简单，却又如此强而有力</p><p>我好想打完活动，好想接着肝泳装，又好想肝wows，事情太多根本忙不过来</p><blockquote><p>评论：又是砍口垒开活动的时节，wows 没啥想肝的了，然后就入坑了明日方舟。对于砍口垒我只有一句话：坐而言不如起而行。</p></blockquote><h2 id="2020年8月20日"><a href="#2020年8月20日" class="headerlink" title="2020年8月20日"></a>2020年8月20日</h2><p>还是很担心被开…</p><p>确实给私人老板打工不容易。</p><p>虽然我这个月工资似乎涨了？</p><p>我还是多写写算法题吧（</p><blockquote><p>评论：啊原来我涨过工资的吗</p></blockquote><h2 id="2020年9月15日"><a href="#2020年9月15日" class="headerlink" title="2020年9月15日"></a>2020年9月15日</h2><p>买了小号的红轴键盘放办公室，舒服了很多，右手不用拐出去了</p><p>但是桌面感觉还是差点意思。姑且买了亚克力架子，可以在上面放书</p><p>问题就是再买一个屏幕的耗费有点大，不知道要不要弄。毕竟（</p><blockquote><p>评论：家里也是 84 键的，不过是青轴，真的挺舒服的，当然要记得装额外的小键盘。</p></blockquote><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>不知道为什么，在副屏幕打字总有点卡卡的</p><p>不过好象是 telegram 的问题，在 notion 里打字就不会有这种感觉</p><p>好神奇，只有 telegram 打字会有这种延迟的感觉，但是在 notion 里就完全不会</p><p>我感觉调成两边一致两边都有点卡卡的，但是因为我主屏幕是 144 所以可能感觉不太出来，动画会流畅很多</p><p>然后使用 notion 就完全没有区别了，基本看不出来</p><p>（144 真强啊）</p><blockquote><p>评论：其实这个是 telegram 的问题，时不时会出现打字的时候 cpu 飙升然后就变卡，所以现在 Unigram 和 Telegram 混着用。</p></blockquote><h2 id="2020-12-05（看这个标题，是用小狼毫自动生成的日期！）"><a href="#2020-12-05（看这个标题，是用小狼毫自动生成的日期！）" class="headerlink" title="2020-12-05（看这个标题，是用小狼毫自动生成的日期！）"></a>2020-12-05（看这个标题，是用小狼毫自动生成的日期！）</h2><p>Telegram 突然爆炸了不知道为什么…</p><p>然后我还是处于想要写点什么，那就还是来这里写吧。</p><p>今天把 2k 屏幕的缩放调到了自定义的 115%，看起来比 100% 要舒服很多。</p><p>并且切换到了 Unigram，打字终于不会卡了。</p><p>然后它服务器就爆炸了。</p><p>xaml 的学习曲线确实非常陡峭，只是弄些皮毛都是举步维艰的。</p><p>不过 WinUi 提供的控件确实好用。</p><p>我觉得还是把我的 Twitter 锁起来比较好。</p><p>考虑把这里的随笔整理一下发博客。</p><blockquote><p>评论：然后现在发出来了（</p></blockquote><h2 id="2020-12-06"><a href="#2020-12-06" class="headerlink" title="2020-12-06"></a>2020-12-06</h2><p>我感觉我学东西好慢啊…</p><p>好多进一步开发需要的东西我都花好长时间才能学会。</p><p>学会之后发现，那只不过是一层窗户纸，一捅就破。</p><p>然后实际上也没学到太多。</p><blockquote><p>评论：昨天晚上睡不着看 AutoFac 的时候就有这种感觉，自己终于开始理解什么是依赖注入而且自己以前明明就做过类似的操作。</p></blockquote><p>PS：原来 hexo 是看 MarkDown 文件创建日期来决定文章的发布日期的</p>]]></content>
    
    
    <summary type="html">谁知道我当时写这些东西的时候在想什么</summary>
    
    
    
    <category term="随笔" scheme="https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="胡言乱语" scheme="https://blog.rekidunois.cc/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>正式工作一年半（实习以来两年半）的一点碎碎念</title>
    <link href="https://blog.rekidunois.cc/2020/11/One-Year-For-Work/"/>
    <id>https://blog.rekidunois.cc/2020/11/One-Year-For-Work/</id>
    <published>2020-11-18T11:53:34.124Z</published>
    <updated>2021-07-06T13:16:18.512Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Tempora mutantur, nos et mutamur in illis;</p></blockquote><p>大学以前我最想要的东西就是一台个人电脑。但是家里只有一台老旧的电脑，还是和爸妈共用的，为了多少能体验一下电子设备，省吃俭用买了台三百块的手机，爸妈知道后我还被骂了一顿。</p><p>大学以后我最想要的就是自己一个人住的单间，因为学校宿舍的条件实在太过恶劣。但是在大学我还是用电脑做了很多事情，虽然那台电脑特别破。</p><p>实习被我认为是逃离垃圾大学的第一步。实习之前有个和学校合作的培训公司跑过来给全班人强制培训，因为内容是硬件所以我毫无兴趣（并且据熟悉硬件的舍友说，他教的东西大一学生都会做，而且他还真的让他一个大一学弟来顶替他上课）。这时候接到了现在这家公司的面试请求，于是请假跑去深圳面试，住了一天然后回来（这样可以请两天假不去培训）。最开始我不觉得我能过，因为我以为他们是用 c# 和 .Net 的公司，结果面试题是 c。然后我 c 基本学的一塌糊涂，cs 基础几乎等于没有（因为学校都没教，我也不知道该学啥）。唯一会的就是链表，而且还很多错。</p><p>没想到最后居然同意我实习了。同期有两个毕业生，他们试用期我实习期。最开始的日子非常悠闲，甚至没有布置任务。由于旧的办公室人坐满了，我们三个是在隔壁楼新租的办公室。没有上司看着你工作，再加上任务没布置/布置了也没有很重，同期的一个人甚至买了台 Xbox 放办公室里，接办公室的 4k 屏玩大镖客。</p><p>实习的结果，我没有按时完成我的第一个任务。虽然相关代码在 dead line 前两天才给我，我要从其中一个项目迁移到另一个项目中。开发途中的需求也不断修改，而且事后我觉得，这个需求并不是非常好做。我当时害怕及了，HR 并没有跟我聊有关转正的事情，我已经做好了毕业去重新找工作的准备了。结果之后我还是安全转正了，并且顺利负责了其他的项目。</p><p>在经历了蠢的要死的毕业设计，跟副院长斗智斗勇之后，总算是顺利毕业了。成为了正式工，我却感觉和实习的时候没有特别大的区别。给我分配的项目依旧很少，以至于很多需要提供的需求在 deadline 之前几天才会给我。而我秉承不想加班的理念，很多项目被几个人一起顺理成章地拖慢了。这时候我渐渐发现了公司代码的一些问题。</p><p>提报的闪退，崩溃问题非常多，但是我们的日志输出是很乱的，并且崩溃在日志上也不一定能看得出来。我觉得 c++ 要规避很多崩溃问题，肯定需要添加单元测试。但是整个公司的 c++ 项目使用的还是 msvc 2013 版本的编译器，并且使用比较旧版本的 Qt，新的测试项目引用这些代码之后不能通过编译，添加单元测试的想法一直停留在想法里。我不确定我这个项目能不能升级，升级之后其他的项目要不要一起升级，愿不愿意升级。总之就是和大多数代码故事里说的一样，屎山依旧是屎山，很难改变。</p><p>我想了很多办法提升开发体验。甚至想过用 .Net 重构一个项目。其实最近需要上架微软商城的需求，就是重构的好时机，但是上司直接说：我们不可能用微软的技术栈重新写一个项目。所以这条路就死了。停留在旧代码的这个项目，在之后的迭代中会发生什么事情真的难以预料。</p><p>我每修改一行代码就在担心，这样会不会导致崩溃，会不会功能不正确，会不会让我的评价进一步降低？之前 hr 已经和我聊过说测试认为我发的版本质量比其他人都低，我说没办法啊，要么你加班自己测试各种情况测出来再改，改完了再发版本。要么写单元测试代码，规避常见错误的同时，对于以前已经发生过的错误也能保证修改代码后不会再次出现。</p><p>但是说实话，我自己有几斤几两很清楚。我是个下决心要学 WPF 然后研究了半天项目结构如何组织，最后慢慢就放弃了的菜鸡程序员。崩溃问题我自己写出来的也有很多，低级错误也没少犯。以至于到今天我写每一行代码都还是战战兢兢，思前想后，畏首畏尾。发的每一个版本都害怕会不会出现问题，奇奇怪怪的 Windows Api 经常看半天不知道他要干嘛。自己喜欢的技术，也经常觉得自己是叶公好龙，看半天一个能看的玩意儿都做不出来。渐渐的我也失去了追求更好的技术的信心，每天除了工作就只是打游戏。</p><p>最近开始研究 WinUI，发现里面提供了非常多开箱即用的东西，而且不一定非得写 UWP，可以写 Win32，感觉之前碎片化学习的东西，慢慢都能一点点组合起来用了。感觉重拾了一点点信心，开始搞很久以前就想做的音乐播放器了。希望这一次不要半途而废吧。</p><p>这三年来我玩的游戏可能没有大学三年多，但是玩的时间说不定比大学三年长，而且常玩的游戏居然没什么特别大的变化。砍口垒，wows，fgo，风暴英雄，文明6。最近开始玩方舟，塔防游戏也能算是我很喜欢的游戏类型，唯一玩的变少的游戏可能是音游了吧。感觉自己反应真的不如高考完那时候好了，很多当时能 fc 的曲子现在怎么打怎么死。</p><p>其实对我来说，游戏和编程区别也不算大。都是我的爱好，只是编程是有学习曲线的，你在其中遇到的挫折会比游戏多得多。而游戏开发者肯定希望你花更多的时间在游戏上，所以你可能遇到的挫折更少，或者更容易克服。虽然我游戏玩的也不是很好，但我还是希望我编程也能像游戏一样，总能找到令我满意的解。</p><p>出来社会一年多，其实我内心感觉以前的朋友门混的大概都比我好。爸妈嘴巴上说着你开心就好，实际上买房买车找老婆，交家用，这些其他人要考虑的事情他们一个也没有少想。只是我们之间交流不如其他父母和孩子之间深入，我又是能不说话就不说话的性格，所以聊的不是很多吧。很多事情我有默默在做，但是非让我说出来我更倾向于保持沉默。「老死不相往来」是我觉得我对现实人际关系的一种犬儒。先不论父母，朋友什么的我觉得我已经伤害了很多人的感情了，与其继续接触新的朋友然后再伤害他们，不如不要和更多的人交流，以免有人受伤。</p><p>毕业的时候我与自己顶下了三年之约，三年后的自己要更加优秀，让自己更满意，找到更好的工作。三年过半，我觉得这个约定可能非常难实现了。但是好在自己也不能把自己怎么样，这个约定不管是三年还是五年，我都会一直往前走，直到真正实现这个约定为止。</p><blockquote><p>希望与未来的自己相遇在更加广阔的海洋上</p></blockquote><p>The end</p>]]></content>
    
    
    <summary type="html">我花了一年多的时间来取悦自己，然后发现自己是真的菜。</summary>
    
    
    
    <category term="阶段总结" scheme="https://blog.rekidunois.cc/categories/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="胡言乱语" scheme="https://blog.rekidunois.cc/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
    <category term="时间" scheme="https://blog.rekidunois.cc/tags/%E6%97%B6%E9%97%B4/"/>
    
    <category term="工作" scheme="https://blog.rekidunois.cc/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>2020年的iPad能为你做什么?</title>
    <link href="https://blog.rekidunois.cc/2020/06/iPad-mini5-Reviews/"/>
    <id>https://blog.rekidunois.cc/2020/06/iPad-mini5-Reviews/</id>
    <published>2020-06-19T16:00:00.000Z</published>
    <updated>2020-06-28T09:33:07.055Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>iPhone: 用户不知道他们想要什么, 直到我们推出了产品<br>iPad: 公司不知道用户想要什么, 直到用户买了产品</p></blockquote><p>从 iPad Pro 开始, 苹果就有意增强 iPad 办公方面的能力. 而在此之前 iPad 是主打娱乐功能的产品. 看个视频打个游戏, 屏幕又大续航又好, 在平板电脑这个领域其综合实力超过了绝大多数的对手, 唯一的短板便是生产力这一块. 而随着 Windows 平板和 Chrome OS 在生产工具端的发力, iPad 确确实实感受到了压力, 比如说在教育领域.</p><p>市场如何变化其实我并不关心, 我比较感兴趣的是各种设备的功能. iPad 本来对于我也确实只是娱乐设备, 用来看看视频打打游戏非常方便. 但, iPadOS 的生产力更新真的于我而言毫无作用吗?</p><h2 id="生产力-键盘-鼠标"><a href="#生产力-键盘-鼠标" class="headerlink" title="生产力=键盘+鼠标"></a>生产力=键盘+鼠标</h2><p>我手上的这款是 iPad mini 5. 论性能和续航都算是比较 OK 的产品, 还能使用 apple pencil.</p><p>但是你拿他当生产力用有个问题: 你需要长时间低头, 或者长时间举手. 放在桌子上手不用举起来, 但是颈椎要向下弯, 对于我这种显示器都要用支架弄到和我视线平齐的人来说, 自然是非常不爽的. 而如果把 iPad 也挂起来, 或者用手举着, 怎么说长时间都会很累. 要长时间使用它, iOS 13 更新后支持的蓝牙鼠标键盘连接就非常有必要了. 因为你可以把它挂起来然后手放在桌子上操作, 脖子也不用一直低着. 并且 iPadOS 13.4 更新之后的鼠标连接比之前的也更棒了: 光标更好看, 动画效果更多更直观.</p><p>为此, 我购入了罗技 K380 和 M336 键盘鼠标, 来配合我的 mini5 使用.</p><h3 id="K380-中规中矩"><a href="#K380-中规中矩" class="headerlink" title="K380: 中规中矩"></a>K380: 中规中矩</h3><p>我对蓝牙键盘还是有一定的便携需求, 所以没有用手上那把红轴机械. 再加上本来这把机械的蓝牙就不是很好, 我现在都是用有线模式来使用, 在京东购买了 K380, 我认为还是比较值得的.</p><p>她就是一块普通的笔记本键盘, 拆下来加上蓝牙的那种感觉. 手感还算过得去, 不会因为需要便携性而弄的过于狭窄, 打字肯定没有问题. 没有小键盘, 有 Fin 键和功能键. 支持三个设备连接和切换, 蓝牙的开关就在外面, 开关起来很容易, 这也能节省电池的用量. 毕竟我那把红轴蓝牙就是因为蓝牙开关在背面, 每次要掀起来才能开关, 我就懒得关, 结果续航就尿崩, 几个星期就要换一次电池.</p><p>我的键盘比鼠标早一天到(因为我鼠标买错买成只支持2.4g的, 所以退掉重新下单了 M336), 鼠标没到的时候我就在研究键盘. 发现还是有不少快捷键可以用. 比方说和 Windows 逻辑一致的 Alt + tab 切换应用, 空格滚动网页等等. 剩下的就是各个 app 对快捷键的支持了. 长按 MacOS 上的 cmd 键可以看到当前 App 所支持的快捷键.</p><p><img src="/images/blog/2020-04-13-15-45-46.png" alt="Reeder 4 所支持的快捷键, 大多是和 MacOS 上的相同或相似"></p><p>我用的应用还是有很多没有对键盘快捷键进行支持, 这也应该是支持连接键盘的设备不多的原因. 个人认为 iPadOS 要想在生产端发力, 那么应用对快捷键的支持肯定也是必不可少的.</p><h3 id="M336-差强人意"><a href="#M336-差强人意" class="headerlink" title="M336: 差强人意"></a>M336: 差强人意</h3><p>M336 是相对比较便宜的一款蓝牙鼠标, 她所支持的也只是蓝牙3.0协议. 而且对于我的手来说实在是有点小, 不得不使用抓鼠手法使用. 除此之外蓝牙输入设备会出现的卡顿也会出现, 但是也算是勉强够用的设备.</p><p>抛开鼠标本身的素质不谈, 鼠标 + iPad 绝对是如虎添翼一般的存在. 前面也有讲到我是把她挂起来使用的, 有了鼠标之后, 我就几乎能做所有事情了. 无论是码字, 阅读还是聊天, 我的 iPad 从此变成了一台小笔记本一般的存在. 浏览信息流, 看 rss 订阅, 和别人聊天, 用 OneNote 记笔记. 我一直苦恼于 Windows 上没有用的顺手的 RSS 阅读器, 这下我可以暂时不用烦恼了, 直接用 Reeder 就是了.</p><p>iPad 除了满足生产力需求, 其娱乐能力也是非常不错的. 看视频就不说了, 我还在上面尝试了很多手游. 首先配合鼠标, 就可以很轻松地在桌面状态下玩手游, 而不必低着头或者把手机/平板举起来. 虽然如果要同时操作电脑和平板的时候, 要不停切换鼠标很难受, 但是其实从理论上来说, iPad 的画面是可以投射到 PC 上播放, 并且可以直接控制 iPad 的. 只是现在实现了这个功能的投屏接收端几乎没有而已. 如果实现了, 就可以用一套键鼠同时操作电脑和平板, 加上 Android 设备可以使用的 scrcpy, 移动设备就可以完全使用 PC 来控制, 操作体验上更加无缝了.</p><h2 id="所以-iPad-的需求到底是什么"><a href="#所以-iPad-的需求到底是什么" class="headerlink" title="所以 iPad 的需求到底是什么?"></a>所以 iPad 的需求到底是什么?</h2><p>这其实是我一直以来相信的事情. 电子设备之所以会有平台之争, 一方面是因为商业公司之间会有竞争, 另一方面也是因为百花齐放才是这个领域保持缤纷多彩的原因之一. 所以作为用户, 如果在这个平台上有做不到的事情, 那就把能做到这件事的平台也拿来用就好了. iOS 上看不了 EHViewer, 那我就买一台 Android. Windows 上玩不了 FGO, 那我就去买一台 iPad. 如果有人说他可以用一台设备, 就处理生活, 工作和娱乐的所有事情, 那固然非常厉害. 但是如果我从 iOS 到 Android, 从 Windows 到 MacOs 全都用上, 那不也挺好的嘛? 现在我已经有了 iPad, 主力的手机是 iPhone, 副机是 Android, 可能就差一台 Mac 了.</p><p>但是因为我也没有用过 Mac, 并不确定 MacBook 和 iPad 之间是否会有重叠的需求. 我唯一能想到的就是 Mac 玩不了手游. 其他的 iPad 可能就只剩下续航和便携性了吧. 要论操控, 即使大家都希望 MacBook 能添加触屏, 但是我还是觉得自带键盘和触控板的 MacBook 要比 iPad 在操控方面是要好一点的. 虽然 iPad 现在可以添加这两样外设了.</p><p>另外 ,Apple Pencil 很好用, 用来画个示意图或者理清思路的时候非常方便. 就是一代的笔会经常忘记充电. 二代就好多了, 可以贴在 iPad 上无线充电, 只要 iPad 是有电的, 笔就不会没电.</p><h2 id="One-more-things"><a href="#One-more-things" class="headerlink" title="One more things"></a>One more things</h2><p>不知道从什么时候开始, 新闻开始说苹果有意使用自家的 ARM 芯片来代替 MacBook 中的 Intel 芯片. 而两天后的 WWDC, 据说苹果会终于宣布一台使用 ARM 处理器来驱动的 MacBook. 不知道这一步对于 MacBook 和 iPad 来说都意味着什么, 但是我个人还是非常感兴趣的.</p>]]></content>
    
    
    <summary type="html">iPad 的需求其实是用户自己创造的</summary>
    
    
    
    <category term="产品体验" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"/>
    
    <category term="平板电脑" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E5%B9%B3%E6%9D%BF%E7%94%B5%E8%84%91/"/>
    
    
    <category term="iPad" scheme="https://blog.rekidunois.cc/tags/iPad/"/>
    
    <category term="iOS 13" scheme="https://blog.rekidunois.cc/tags/iOS-13/"/>
    
  </entry>
  
  <entry>
    <title>最便宜的二手 835 安卓手机之一，我的第二台安卓智能设备！</title>
    <link href="https://blog.rekidunois.cc/2020/01/LG-V30-Reviews/"/>
    <id>https://blog.rekidunois.cc/2020/01/LG-V30-Reviews/</id>
    <published>2020-01-28T16:00:00.000Z</published>
    <updated>2020-06-28T09:33:20.430Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>买这部手机的目的就是，砍口垒，哈吉马路由!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实严格来说, 我的第一台智能手机确实是安卓机. 是当年最便宜(300cny)就能买得到的酷派, 型号是啥忘记了. 甚至这 300 我还是跟同学借的无息贷款才能买. 然后同学也买了, 但是高考前两百多天他就被老师收了我的还在(逃</p><p>不过高考结束之后我就买了 iPhone 6, 并且一直用到了大四末尾才换了 iPhone 8. 而且即使换了之后, 我的 iPhone 6 还在作为我的游戏机继续服役(说着就拿出来摸了一下 PCR).</p><p>虽然我对于 iPhone 的怨言基本只有续航, 但是确实有些事情只有 Android 上才能做, 比方说砍口垒<del>和 EHentai, 还有 PronHub, 还有被封禁的 Telegram 频道(虽然在之后的更新中 ios 也能浏览那种频道了)</del>. 所以说, 还是有必要弄一台 Android 手机的. 而且对 Android 进行各种调教, 这种乐趣在不对 iOS 进行越狱的现在, 也就只能在 Android 上才能体验到了.</p><h2 id="最便宜的835"><a href="#最便宜的835" class="headerlink" title="最便宜的835?"></a>最便宜的835?</h2><p>LG-V30 是 LG 在 2017 年发布的手机, 其实按理来说时间还不算很长, 你看隔壁小米 6 不也是 17 年发布的嘛(笑)<br>这东西解锁没有什么难度, 也没有什么额外的溢价, 所以二手市场上价格还算可以. 我买的时候目测是比米 6 稍微便宜那么一点, 作为贫困人口当然就是选个便宜的完事了.</p><p>不过事后想想, 其实就砍口垒用不了 835 那么好的 soc, 虽然是前代旗舰, 但是总归功耗下不去, 续航方面就会比较尴尬, 特别还是二手机子.</p><p>嘛, 但是也不是什么坏选择, 好好用咯.</p><h2 id="开始折腾"><a href="#开始折腾" class="headerlink" title="开始折腾"></a>开始折腾</h2><p>淘宝上直接二手下单, 没什么好说的. 屏幕无坏点无烧屏, 运气还算不错. 附赠一条 Type-C, 一张钢化膜, 一个硅胶壳.</p><p><img src="/images/blog/2020-01-28-23-08-47.png" alt="LGV30"></p><blockquote><p>这其实是用了一段时间了.<br>由于这东西的背面是指纹收集器, 所以刚拿到手的时候背面就已经惨不忍睹.<br>正面没有工具我也懒得去贴那张钢化膜了.</p></blockquote><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>其实原生的 LG 系统就很接近原生, 只是当时还是 Android 9, 我还是比较希望到 10, 但是后来还是发现 LOS 非官方版的 Android 10 有问题, wifi 有概率会无法启动, 所以只能刷着 Android 9.</p><p>按照 xda 上面的<a href="https://forum.xda-developers.com/lg-v30/development/rom-lineageos-15-1-t3789793">帖子</a>, 一步步按照教程来做, 刷入的时候没什么大问题, 只要记得该清的东西都清掉就好.</p><p>顺带一提, 因为这个机子店家帮我解锁好了 Bootloader, 所以开机的时候会出现一个警告页面. 然后我试了好一会儿才知道怎么进 recovery.</p><p>我一开始是刷了 LOS17, 也就是 Android 10 版本的 LOS, 指引在<a href="https://forum.xda-developers.com/showpost.php?p=80271901&postcount=1580">这里</a>. 刷完之后很不幸地我遇到了他们一直在烦恼的有些人 wifi 无法使用的问题, 于是只能刷回 Android 9 版本的 LOS 16. 然后就遇到了摄像头无法启动的问题. 无论是自带的还是 Google play 里下载的打开之后摄像头都是黑的. 找了好久终于在 xda 里找到了<a href="https://forum.xda-developers.com/showpost.php?s=5f9a053ba3b8c8950bad675670d4698d&p=80401931&postcount=1664">解决方法</a>. 按照流程走, 总算是打开了这东西的摄像头.</p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>LOS 中没有 Google 相关的软件, Google 的那个框架和应用商店都没有, 所以还需要安装 open Gapp 的<a href="https://opengapps.org/">包</a>.</p><p>然后就是代理. 既然这东西要砍口垒, 那么代理就是必不可少的. 其实安卓和 iOS 代理软件遇到的共同问题就是, 可能会因为两个系统的内存清理机制而被杀掉进程, 进程被杀了代理自然也就断了. 所以当你的机器占用很高很卡的时候有可能会出现代理断掉的情况. Android 这边的解决方法之一就是将代理软件转成系统程序. 这个操作可以用 Magisk 中的 App Systemizer 来实现. 在 Magisk 中安装上述模块, 然后选一款终端软件(比方说 Termux 之类的), 输入如下命令.</p><blockquote><p>su<br>systemize</p></blockquote><p>然后按照提示操作即可. 列出所有应用, 输入代理应用(当然, 其他应用也可以用这种方法变为系统应用)的编号, 选择储存路径, 这样就可以将代理软件变为系统程序. 然后按照提示退出.</p><p>之后就尽情体验一下 Android 的生态吧. 对我来说首先要安装的肯定是 Tele…不是, 是 Ehv…也不对, 是 Kcanotify 泥潭魔改版! 能砍口垒了之后就能做一些骚操作比方说一边看剧一边肝船什么的, 毕竟 iPhone 现在好像还没有分屏这种东西.</p><p>当然在我买这手机的时候, Telegram 被封禁的频道还不能在 iOS 上看, 所以还是有必要装的. 当然 EHviewer 是 Android 独占对吧? 大家都懂的(逃</p><h2 id="使用感想"><a href="#使用感想" class="headerlink" title="使用感想"></a>使用感想</h2><p>写这篇文章的时候用了也有三个多快四个月了. 确实是比之前我用的那个沙雕荣耀要开心多了. 起码别人能在安卓上的我差不多有都能做, 日常砍口垒看本子什么的也完全没有问题. 不过除此以外我要用安卓的地方也不多就是了. 其他日常我还是喜欢用 iPhone 的 (</p><p>续航其实不算特别好, 标称 3300 mAh 的电池只剩下了 2800+ mAh(用 AccuBattery 测出来的), 所以看什么时候续航开始尿崩的时候就考虑去换一个电池比较好. 好在电池还是好买的, 淘宝上三十左右就有.</p><p>然后就是单手操作者的怨念, 虽然这是我的第一个类全面屏设备, 但是我还是觉得太太太太大了这屏幕. 并且这东西的指纹识别和电源键是同一个按键, 用的我很不习惯. 毕竟 iPhone 有 home 键和 电源键两个可以唤醒屏幕. 不过我又发现微软启动器可以设置双击唤醒和锁屏, 于是就习惯了. 我觉得这个功能反而比 iPhone 的要好, 而且我也不是很喜欢抬手亮屏这个功能, 还是双击比较爽.</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实这篇文章比较水, 关键是我也不知道有什么好写的, 所以只能写点感想之类东西. 疫病期间, 买的手柄还没到所以不能玩冰原, 只能群星和下棋作乐, 偶尔提起精神来码码字, 总算是发出了这篇文章.</p>]]></content>
    
    
    <summary type="html">使用安卓就像是玩了很久人族之后换神族或者虫族</summary>
    
    
    
    <category term="产品体验" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"/>
    
    <category term="手机" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E6%89%8B%E6%9C%BA/"/>
    
    
    <category term="Phone" scheme="https://blog.rekidunois.cc/tags/Phone/"/>
    
    <category term="LG" scheme="https://blog.rekidunois.cc/tags/LG/"/>
    
    <category term="835" scheme="https://blog.rekidunois.cc/tags/835/"/>
    
    <category term="二手" scheme="https://blog.rekidunois.cc/tags/%E4%BA%8C%E6%89%8B/"/>
    
    <category term="Android" scheme="https://blog.rekidunois.cc/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>码农的毕业笔记本——Y9000X</title>
    <link href="https://blog.rekidunois.cc/2020/01/y9000x-Reviews/"/>
    <id>https://blog.rekidunois.cc/2020/01/y9000x-Reviews/</id>
    <published>2020-01-24T16:00:00.000Z</published>
    <updated>2020-06-28T09:34:01.586Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>轻薄, 标压, 性能, “我的对手很少”, 但是几乎没人能打得过我</p></blockquote><p>笔记本电脑绝对是 PC 工业史上的一颗璀璨明珠. 计算机从最开始占地一个房间, 到可以摆在桌面上, 到可以塞到手提袋里随时拿走, 这样的发展历程已经过去了几十年. 当影视作品中表现一个人在“工作”的时候, 笔记本电脑也是高概率会出现的道具之一.</p><p>很长一段时间, 我已经接受了这样的设定：想要轻薄, 性能就不高；想要高性能, 笔记本就会很厚重, 并且续航很低. 如果你又要轻薄, 又要高续航, 还需要高性能？请选择火星牌笔记本（雾）</p><p>但是其实这些需求中, “高性能”这一项对于每个人的定义可能都是不同的. 如果你要玩游戏, 或者机器学习什么的, 你可能需要一个比较强的 GPU, 不过对于我来说, 我只希望写代码的时候 IDE 能反应快一点, 开浏览器的时候能多开几十个标签页, 然后编译的时候花的时间能少一点而已. 对, 我可能只需要一颗强壮的 CPU.</p><p>只是市面上其实很少有这种只偏重 CPU 的产品. 如果选择一款搭载标压移动版 CPU 的笔记本, 第一它会非常厚重, 第二它的散热还需要兼顾 GPU. 而且在我选购游戏本的那个时代, 其实 16G 的内存和大号 SSD 其实非常的不普及, 特别是 NVMe 的 SSD. 所以在日常使用中其实这类游戏本的体验, 只能说是差强人意. 如果我要稍微兼顾一点便携性, 比方说过年的时候带回老家, 就会非常痛苦. 我一个朋友甚至因为带游戏本回家把背包都背得开裂了.</p><p>那么, 有没有这么一款有强劲的 CPU 性能, 没有独显, 然后可以做到非常轻薄的笔记本呢？答案已经写在标题里了, 那就是联想出品的 Y9000X.</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>CPU 最高可以选配 i9-9880H, 我手上这款是i7-9750H. 显卡则使用的集成显卡, 没有独显.</p><p>内存最高可选配 32G 双通道版本. 但是这款机型的所有显卡都是焊在主板上的, 并且没有额外的内存插槽, 所以无法自行升级内存. 但是这款机型的最低配也是 16G 起步, 一般来说是比较足够. 但是即使加钱到 32G 也不贵, 只是必须和 4k UHD 屏幕一起买就是了.</p><p>储存设备方面, 它只有一块 SSD, 我手上的是来自三星的 1T NVMe SSD. 最高可选配 2T 版本. 作为一个笔记本来说, 这个大小应该是够用的. 如果有大量冷数据或者视频之类的, 建议考虑储存在 NAS 或者网盘中可能会比较合适. 如果还是觉得不够, 机器搭配了一个 M2 接口以供用户自行添加硬盘.</p><p><img src="/images/blog/2019-11-12-00-50-41.png" alt="CrystalDiskMark"></p><blockquote><p>应该是我用过的最好的硬盘了?</p></blockquote><p>屏幕可以选择 1080P 或者 4k 分辨率的两个版本. 我选择了 1080P 版本, 其实稍微有点后悔, 不过也还好. 这块屏幕给人的感觉还是不错的, 亮度很高.</p><p><img src="/images/blog/2020-01-24-00-44-32.png" alt="B site"></p><blockquote><p>拍照技术不好, 不知道能不能看出来</p></blockquote><p>IO 接口方面, 它提供了两个 USB 3.1 Type-A 接口, 其中一个支持关机充电. 只是这两个接口都位于机身的后面, 屁股的位置上. 所以要插拔不是很容易, 我平时都是用来插诸如无线鼠标一类的设备.</p><p><img src="/images/blog/2020-01-24-12-16-50.png" alt="屁股"></p><blockquote><p>左边那个是罗技 G304 的接收器, 右边那个有电池标志的接口是支持关机充电的.<br>但是平时没啥用, 所以拿个塞子塞住</p></blockquote><p>然后在她的右边还有（非常先进的）3.5mm 耳机孔, 还附带一个读卡器, 这应该能方便摄影师朋友们导出摄影素材.</p><p><img src="/images/blog/2020-01-24-12-22-15.png" alt="right"></p><p>左边它提供了轻薄本必备的雷电3接口, 而且还有两个. 这两个接口共享 40Gbps 的带宽. 当然如果你只用其中一个, 也可以独享 40Gbps 的带宽, 因为一般我们会需要一个 Type-C 接口来充电. 不然的话可能会让单个 Dock 非常烫.</p><p><img src="/images/blog/2020-01-24-12-23-26.png" alt="left"></p><p>Y9000X 搭载的是全尺寸的键盘, 除了有小键盘以外, 还有尺寸正常的方向键, 而不是通常的那种将上下压缩得很小的方向键. 只是我感觉键盘似乎偏上了一点, 下方的距离非常开阔, 导致打字如果带了手表或者手环, 下方会顶着这个东西, 可能不是很舒服. 手臂吊起来打字又会很累.</p><p><img src="/images/blog/2020-01-24-12-24-36.png" alt="keyboard"></p><p>键盘手感还算可以, 和机身的金属质感很搭. 我个人比较喜欢她亲戚隔壁 ThinkPad 的手感, 但是如果要打比方的话, 这个东西有点像机械里的茶轴, 然后 ThinkPad 的键盘有点像红轴. 电源键同时也是指纹识别配件, 可以搭配 Windows 10 的 Windows hello 使用. 触控板中规中矩, 是一整块的状态, 但是不像 MacBook 一样到处都可以按压, 属于那种隐藏式的左右键按压.</p><p>本机搭载的摄像头是那种位于屏幕下方的鼻孔摄像头, 但是联想很贴心地为它配备了物理开关. 这一点在 ThinkPad 系列似乎也成了标配, 应该得到鼓励.</p><p><img src="/images/blog/2020-01-24-12-26-32.png" alt="webcam"></p><p>由于没有搭载独显, 也没有奇奇怪怪的认证, 所以这台机器的 C 面非常干净. 拿到手的时候只有两个贴纸, 而且由于采用的是金属磨砂材质, 这些贴纸撕起来也非常轻松, 并且不会留下什么痕迹. 对于强迫症来说是非常舒服的事情.</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>这台机器的一大卖点是, 只搭载标压移动 U 的情况下, 还为其配备了四个散热风扇, 散热用料非常足.(于是声音也非常大, 简直起飞).</p><p>随手跑了一下 CeniBench, 得分居然比 7700K 还要高</p><p><img src="/images/blog/2019-11-12-00-49-16.png" alt="CeniBench"></p><p>16G 双通内存还是很爽的, 减少访问虚拟内存的频率那就能减少卡顿. 频率 2667 (咦不应该是2666嘛), 不知道能不能艹一艹到 3200 (逃</p><p><img src="/images/blog/2020-01-24-12-33-58.png" alt="memory"></p><h2 id="使用感想"><a href="#使用感想" class="headerlink" title="使用感想"></a>使用感想</h2><ul><li>便携</li></ul><p>这篇文章从我买 Y9000X 开始, 大概是十一月份左右, 到现在一月份, 担任主力开发机两个半月. 除了丢在公司写代码以外, 偶尔也会蹭了公司网下载的东西然后拿回家里去. 这一点我就发现她是真的占地方小而且轻啊. 如果我不嫌插线拔线麻烦甚至可以一直拿着这个东西上下班通勤, 不管是坐公共交通还是骑自行车, 我觉得带着都不成问题.</p><ul><li>发热</li></ul><p>热嘛确实是热. 不过在键盘区域感受不是很大. 电源非常热, 这个 95W 的电源烫的要死, 而且还不好带. 但是市面上所售这个功率的 PD 充电头其实并不多, 我看唯一适合便携的似乎是苹果的那个新 16 寸 Macbook Pro 用的充电插头. 但是那个要小六百块钱了, emmm 贫穷它缠绕着我.</p><ul><li>续航</li></ul><p>开着高性能但是还是用电池的时候这 CPU 还在疯狂睿频到 4.0 左右, 于是续航就尿崩, 大概一两个小时左右. 然后开了节能和节电模式之后能续到四个小时左右, 在高铁上玩一路大概没啥问题? (而且高铁上还都有插座). 除此以外我似乎没有啥需要脱离电源使用的情况了.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用 Y9000X 也快三个月了. 上一个使用的笔记本是我拿来当台式机用的神船 Z6, 使用三个月的时候我应该刚开始大学生活. 而距离那时已经过去了四年多了, 笔记本这一产品在我看来也有了相当程度的变化. 特别是 SSD 以及内存颗粒价格的降低, 将所有类型笔记本性能都增加到了非常高的一个高度. Y9000X 在这三个月里已经基本覆盖了我所有的使用场景, 工作的时候用来写代码, 然后团建的时候带出去旅游, 春节回家带着她坐火车, 都没有什么大问题. 如果说一定要购买的配件, 那我觉得可能需要一个显卡坞和一块1660super放在老家里, 这样我现在也能快乐冰原了(逃</p>]]></content>
    
    
    <summary type="html">满足两大爱好之一可能再也不需要买新的电脑了.</summary>
    
    
    
    <category term="产品体验" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"/>
    
    <category term="笔记本" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
    
    <category term="Laptop" scheme="https://blog.rekidunois.cc/tags/Laptop/"/>
    
    <category term="Lenovo" scheme="https://blog.rekidunois.cc/tags/Lenovo/"/>
    
    <category term="Intel" scheme="https://blog.rekidunois.cc/tags/Intel/"/>
    
    <category term="Coding" scheme="https://blog.rekidunois.cc/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>2019~2020(己亥年~庚子年)新年假期</title>
    <link href="https://blog.rekidunois.cc/2020/01/Lunar-New-Year-Plan/"/>
    <id>https://blog.rekidunois.cc/2020/01/Lunar-New-Year-Plan/</id>
    <published>2020-01-16T16:00:00.000Z</published>
    <updated>2020-06-28T09:33:28.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>新年明けましておめでとうございます</p></blockquote><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>马上就要新年啦~~. 新房子也基本搞定了, 新年之前的版本也基本没什么大问题了. 于是还是希望在自己正式工作之后的第一个春节能有充实的生活.</p><p>说是春节, 其实基本算是最长的假期了. 除了过春节以外, 还是有相当多的个人时间. 如果能利用这些时间做一些平时一直找不到时间做的事情也不错吧. 于是就想出了这个东西.</p><p>因为回家带的电脑没啥 GPU 性能, 所以也最多就能下下棋什么的. (不然我好想肝冰原啊!!!) 所以这次回去的主要目标就是要做用这本 Y9000X 能够完成的事情.</p><h2 id="博客更新"><a href="#博客更新" class="headerlink" title="博客更新"></a>博客更新</h2><p>editing里面已经积了一大堆想要写但是没写完的东西了, 所以终于有时间好好写写博客. 希望能有所更新吧!</p><ul><li>Y9000X 的使用报告</li><li>LG-G30 的折腾记录</li><li>关于作品中出现的专业知识相关的想法</li><li>沙雕 QT 的吐槽</li><li>2008年和2018年的回顾总结<ul><li>2008年</li><li>2018年</li></ul></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><p>最近发现程序员要提升效率最好的办法, 其实就是所谓的 “时间魔法”——让过去的自己来帮自己完成工作. 说人话就是 “代码复用” 啦.</p><p>为此程序员其实要多积累自己的代码, 并且将其封装成易于使用的库, 需要的时候就大胆的 <code>new</code> 或者注入, 是坠吼的.</p><ul><li>QT 的控件继承提升用类框架</li><li>Windows 的常用 API 的封装计划<ul><li>wifi 相关</li><li>硬件信息相关</li><li>系统配置相关</li><li>命令行操作</li><li>让 C# 也能自由地使用吧!<ul><li>COM</li><li>C# 的依赖库<ul><li>nuget包</li></ul></li></ul></li></ul></li></ul><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><p>前面提到了复用, 这却并非是想要做就能做到的事情, 需要对代码设计下大量的功夫. 现在我对 C++ 和 C# 还有 TypeScript 的了解还相当不够深入. 有很多特性都没用到, 还是要加强这方面的学习.</p><ul><li>继承</li><li>多态</li><li>泛型</li></ul><p>(所以到底如何快速地在需要大量的 switch 或者 if-else 的逻辑中随时扩展功能呢, 在线等, 急)</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>UI 方面还是希望能系统学习一下 WPF, 特别是 XAML 的用法.</p><p>然后非常重要的就是依赖注入啦. Asp.net Core 有自带的我曾经使用过一段时间, WPF 或者 UWP 或者 Win32 应用自带的是肯定没有的. 于是这里就要用到 <a href="https://autofaccn.readthedocs.io/zh/latest/">AutoFac</a> 啦. 首先是可以为没有自带的开发框架带来依赖注入这样的好东西. 其次, 即使是自带依赖注入功能的框架, 也能通过用同一个库来提高统一性, 减少需要学习的东西.</p><p>最后, 如果从零开始一个项目, 不管什么项目一定是有通用的东西. 可以对这方面作出总结, 并且在工作中应用.</p><ul><li>用 AutoFac 来学习如何对项目进行规划</li><li>学习如何使用 XAML 来对单页进行布局吧</li><li>总结在项目中一定会使用到的代码并试着做成静态库吧</li></ul><h2 id="长假之后"><a href="#长假之后" class="headerlink" title="长假之后"></a>长假之后</h2><p>新的一年当然想做的事情有很多很多. 上面说的事情肯定一个长假做不完. 但是长假之后还有长假之后才能做的事情, 这里也稍微列一下.</p><ul><li>冰原通关!!</li><li>检查牙齿, 比方说洗牙之类的.</li><li>全面的身体检查</li><li>买新桌子和椅子, 对自己的桌面空间进行重新设计<ul><li>显示器支架</li><li>藏线和放游戏机用的桌上架子</li><li>主机架</li></ul></li><li>修显示器</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写着写着就写了好大一堆. 感觉肯定不是一个长假就能做完的事情. 嘛新的一年也是需要计划的吧, 可以丢到新年计划中.</p><p>那么, 就是这样, 给自己拜年啦~</p>]]></content>
    
    
    <summary type="html">感觉我平时都不会做这种事情（</summary>
    
    
    
    <category term="计划" scheme="https://blog.rekidunois.cc/categories/%E8%AE%A1%E5%88%92/"/>
    
    <category term="进度" scheme="https://blog.rekidunois.cc/categories/%E8%AE%A1%E5%88%92/%E8%BF%9B%E5%BA%A6/"/>
    
    
    <category term="Plan" scheme="https://blog.rekidunois.cc/tags/Plan/"/>
    
    <category term="Lunar New Year" scheme="https://blog.rekidunois.cc/tags/Lunar-New-Year/"/>
    
  </entry>
  
  <entry>
    <title>倍思屏幕灯简单体验</title>
    <link href="https://blog.rekidunois.cc/2019/12/Baseus-i-wok-Screen-Hanging-Light-Reviews/"/>
    <id>https://blog.rekidunois.cc/2019/12/Baseus-i-wok-Screen-Hanging-Light-Reviews/</id>
    <published>2019-12-08T16:00:00.000Z</published>
    <updated>2021-07-06T13:16:52.576Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>明基, 我叫你一声你敢答应嘛？</p></blockquote><h2 id="超级简短的体验"><a href="#超级简短的体验" class="headerlink" title="超级简短的体验"></a>超级简短的体验</h2><p>嗯，灵车群看见的一个<a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.11882e8dBUeHlb&id=609201426660&_u=91r63kulff39">小玩意</a>, 原价 168￥ 领券入手 118￥. 其实也算不上灵车, 至少没有那块 HP 的垃圾板子灵.</p><p>之前一直用的是大学时候买的三十块不到的磁吸吊灯, 实际上就是一条 LED 灯条带了金属外壳里面放俩磁铁. 照明效果先不说, 一直会照到我的眼睛, 很刺眼. 之前看少数派他们推荐了不止一次明基的那个屏幕灯, 知道了这类东西的存在. 当然, 明基的那款灯还是买不起的. 效果我也没感觉, 也不敢说倍思这个就比明基的好. (虽然我感觉我会感觉不出来两者的区别)</p><p>安装方式很简单, 有一条横臂放在屏幕上,然后后面有一个可活动的配重块, 抵住屏幕的背面让整个灯保持平衡. 然后灯的部分可以调整角度, 我调了一个既不会照到眼睛, 又不会让屏幕反光太严重的角度.</p><p><img src="/images/blog/2019-12-09-22-15-28.png" alt="不开其他灯的情况下就是这么个效果"></p><p>可以调成适合睡眠的黄色灯光, 按一下默认是白光, 再按一下就是黄光了. 很舒服, 旋钮可以调整光照强度. 屏幕倒是另一回事, 起码我桌面这里光照非常舒服.</p><p><img src="/images/blog/2019-12-09-22-16-33.png" alt="桌面效果, 还是不错的"></p><p>不过这东西没有什么 App 可以接入, 要控制只能去控制物理开关, 如果屏幕晃动比较大可能会有点不好的体验. 当然, 这可能是我之后要努力的方向, 最终整个桌面都要焕然一新!</p><h2 id="一点碎碎念"><a href="#一点碎碎念" class="headerlink" title="一点碎碎念"></a>一点碎碎念</h2><p>最近阿秋跑来我司实习了, 然后实习的时候顺便就住我家, 本来一个人相当宽敞的单间瞬间就觉得太窄了. 而且可怜的阿秋还得用睡袋躺在地上. 等他课上完了全职实习的时候, 我俩打算找个两房的房子租. 那时候我再继续考虑弄弄桌子之类的. 顺便, 也终于要让我那个坏掉的 2k 屏看看能不能重获新生了.</p>]]></content>
    
    
    <summary type="html">灵车小件，best 小件</summary>
    
    
    
    <category term="产品体验" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"/>
    
    <category term="桌面布置" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E6%A1%8C%E9%9D%A2%E5%B8%83%E7%BD%AE/"/>
    
    
    <category term="小件产品" scheme="https://blog.rekidunois.cc/tags/%E5%B0%8F%E4%BB%B6%E4%BA%A7%E5%93%81/"/>
    
    <category term="屏幕灯" scheme="https://blog.rekidunois.cc/tags/%E5%B1%8F%E5%B9%95%E7%81%AF/"/>
    
    <category term="倍思" scheme="https://blog.rekidunois.cc/tags/%E5%80%8D%E6%80%9D/"/>
    
    <category term="桌面" scheme="https://blog.rekidunois.cc/tags/%E6%A1%8C%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>我的优秀 RSS 体验折腾记录</title>
    <link href="https://blog.rekidunois.cc/2019/11/rss-ttrss-https/"/>
    <id>https://blog.rekidunois.cc/2019/11/rss-ttrss-https/</id>
    <published>2019-11-11T16:00:00.000Z</published>
    <updated>2020-06-28T09:33:49.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>RSS 是目前为止数字屏幕上最优秀的信息阅读方式之一</p></blockquote><p>自从发现 <a href="https://docs.rsshub.app/">RSSHub</a> 这个优秀的项目之后, 我就开始琢磨如何同时在 Windows 和 IOS 手机上获得优秀的 RSS 体验, 同时也是为了远离 Windows 端糟糕的微博和知乎前端.</p><h2 id="使用-RssHub-生成-Rss-订阅地址"><a href="#使用-RssHub-生成-Rss-订阅地址" class="headerlink" title="使用 RssHub 生成 Rss 订阅地址"></a>使用 RssHub 生成 Rss 订阅地址</h2><h3 id="Rss-与-RssHub-的一点想法"><a href="#Rss-与-RssHub-的一点想法" class="headerlink" title="Rss 与 RssHub 的一点想法"></a>Rss 与 RssHub 的一点想法</h3><p>由于 RSS 会让内容生产者的主站流量损失, 由于 RSS Feed 中无法投放广告为内容生产者产生收益, 由于内容生产者选择依附于强大的平台, 在闭环的生态环境中发布内容, 由于…RSS “死掉”的原因实在是数不胜数. 自从2013年 Google Reader 被关闭之后, 各家互联网厂商都开始倾向于搭建属于自己的 App 的生态闭环. 你会发现当你在手机上使用微信和 QQ 的时候, 里面的内容(比方说图片)几乎无法分享给其他的 App, 公众号中的文章也不允许添加其他的外部链接, 微信内置的浏览器也会按照腾讯自身的商业需要–而不是一些正常的正当理由–来封禁内容的传播. 比方说在微信中不允许查看其他 IM 软件的链接, 带头封禁官方都没有封禁的 <a href="https://996.icu/">996.icu</a> 网站.(一起这么做的还有 360 手机浏览器等国产套壳产品) 对于读者和内容生产者来说, 这样的阅读环境和生产环境显然不能算优秀, 甚至根本就不及格. 无奈国内还是有许多平台上有优秀的内容产出中. 毕竟不是谁都有耐心去研究怎么建站(即使到今天, 建站已经完全没有了技术含量).</p><p>在许多内容都没有官方提供的 RSS 订阅源时, 由来自 B 站的前端工程师, <del>知名女装偶像</del> <a href="https://diygod.me">@DiyGod</a> 发起了 <a href="https://docs.rsshub.app/">RssHub</a> 项目, 旨在为没有官方 RSS 源的平台生成 RSS Feed. 截止到今天, 已经能够生成诸如微博, bilibili, 知乎, 豆瓣等大部分主流平台的 RSS Feed. 也有诸如<a href="https://rsshub.app/tingshuitz/guangzhou">广州市停水通知</a>这样的针对性通知的 RSS Feed 可以生成. 基本上我所接触的所有信息都能找到办法通过 RSS 的方式订阅, RssHub, yes!</p><h3 id="开始学习使用-RssHub"><a href="#开始学习使用-RssHub" class="headerlink" title="开始学习使用 RssHub"></a>开始学习使用 RssHub</h3><p><a href="https://github.com/DIYgod/RSSHub">RssHub</a> 的代码在 GitHub 上开源. 而<a href="https://docs.rsshub.app/">文档</a>中也介绍了 RssHub 的基本使用方式. 但是为了规避平台的反爬机制, <a href="https://diygod.me">@DiyGod</a> 推荐我们自己部署 RssHub 实例. <a href="https://docs.rsshub.app/">文档</a>中也有 RssHub 的部署方法. 我这里选择的是最 Noob 的部署方法–使用 Heroku 进行部署.</p><p>Diygod 已经<a href="https://heroku.com/deploy?template=https%3A%2F%2Fgithub.com%2FDIYgod%2FRSSHub">为 RssHub 做了直接在 Heroku 上部署的链接</a>, 只要点击这个链接, 注册账号并登录就可以直接启动一个你自己的 RssHub 实例. Heroku 的每个账号能每个月有差不多400个小时的免费实例运行时间, 如果你愿意绑定一张信用卡, 这个时间就会增至1000个小时(具体时间我记得不是很清楚, 请登录<a href="https://heroku.com">官方网站</a>查询). 基本来说绑定了信用卡, 就可以在 Heroku 免费运行 RssHub 实例一整个月.</p><p><img src="/images/blog/2019-08-11-22-38-54.png" alt="本月我的用量"></p><p>部署成功之后, 我们还希望在 RssHub 项目代码进行更新之后同步这一更新. 这里可以先把主仓库的代码 fork 一份到自己账号下, 然后在自己的 repo 里设置 WebHook(毕竟你又不能让 Diygod 帮每个人弄钩子), 当自己的项目 repo 更新之后, 就触发 Heroku 实例的更新, 然后在网页上创建从主仓库到自己仓库的 pull request 来更新代码. 这样就可以保证自己建立的 Rsshub 能够得到更新, 修复 bug 和添加新功能.</p><p><img src="/images/blog/2019-08-11-22-40-37.png" alt="创建 pull request"></p><p><img src="/images/blog/2019-08-11-22-42-47.png" alt="这时候 Heroku 就会开始拉去代码并重新构建"></p><p>Heroku 的实例创建之后会自动生成一个链接供用户使用, 类似于 scboy.taobao.com 这样的链接. 然而, 你完全可以使用你自己的域名, 只需要在网页上做几个设置就好了.</p><p>首先, 在你的域名解析服务提供商处添加额外的域名解析服务. 比如说, 添加 <code>rsshub</code> 解析记录, 设置为指向原 Heroku 提供链接的 <code>CNAME</code> 记录, 这样就可以使用你自己的域名访问 RssHub 实例啦!</p><h2 id="使用-ttrss-持续抓取-rss-并阅读"><a href="#使用-ttrss-持续抓取-rss-并阅读" class="headerlink" title="使用 ttrss 持续抓取 rss 并阅读"></a>使用 ttrss 持续抓取 rss 并阅读</h2><p>Rss 阅读器有个问题, 如果你的客户端不在线的时候, 你是没法接到 Rss 订阅源的更新的. 然后 Rss 并不会一直保留推送的文章, 如果时间久了新的文章就会把旧文章挤掉. 这样的话有可能会错过推送. 解决方法就是, 保持你的客户端7*24小时在线, 这样就不会漏掉任何一篇 Rss 推送的文章. 单靠本地阅读器显然是做不到的. 这里就需要 ttrss 出场了. 特别感谢 <a href="https://henry.wang/">@HenryQW</a> 瑰宝打造了 <a href="https://github.com/HenryQW/Awesome-TTRSS">Awesome TTRSS</a> 这个 ttrss 解决方案, 让我们可以非常容易地部署自己的 ttrss 实例</p><blockquote><p><a href="https://tt-rss.org/">ttrss</a>是一款基于 PHP 的免费开源 RSS 聚合阅读器。🐋 Awesome TTRSS 旨在提供一个 「一站式容器化」 的 Tiny Tiny RSS 解决方案，通过提供简易的部署方式以及一些额外插件，以提升用户体验。</p></blockquote><p>部署 ttrss 非常方便, 直接使用 <a href="https://henry.wang/">@HenryQW</a> 编写的 <a href="https://github.com/HenryQW/Awesome-TTRSS/blob/master/docker-compose.yml">docker-compose.yml</a> 即可部署 ttrss 及其依赖. 比如 <a href="https://hub.docker.com/r/sameersbn/postgresql">PostgreSQL</a> 数据库和其他插件. 部署方式这里我直接引用文档说明:</p><blockquote><p>步骤</p><p>下载 docker-compose.yml 至任意目录。</p><p>更改 docker-compose.yml 中的设置，请务必更改 postgres 用户密码。</p><p>通过终端在同目录下运行 docker-compose up -d 后等待部署完成。</p><p>默认通过 181 端口访问 TTRSS，默认账户：admin 密码：password，请第一时间更改。</p><p>wangqiru/mercury-parser-api 及 wangqiru/opencc-api-server 为支持高级功能而加入的可选服务类容器，删除不会影响 TTRSS 基础功能。</p></blockquote><p>按照步骤部署之后, 应该可以直接使用你主机公网 IP:181 的方式访问 ttrss. 但这还远远不够.</p><h3 id="绑定域名-使用-https"><a href="#绑定域名-使用-https" class="headerlink" title="绑定域名, 使用 https"></a>绑定域名, 使用 https</h3><p>自己部署的 ttrss 还需要在 nginx 上设置域名, 才能使用域名来访问 ttrss 服务.</p><p>我使用 <code>Let&#39;s Encrypt</code> 获取免费的 https 证书。它不但为人们提供免费的证书，还提供了一个可以傻瓜式生成证书并修改 <code>nginx</code> 配置的 bot。进入它的<a href="https://letsencrypt.org/">官网</a>，点击 <code>Get Started</code>，根据提示操作，即使是新手也能轻松使用 <a href="https://certbot.eff.org/">certbot</a> 来将你的站点变为 https 站点。在使用时输入你的域名，在服务器这边关于域名的配置就已经成功了。</p><p>但是这时候你还需要一个域名解析服务。我推荐 <a href="https://www.cloudflare.com/">CloudeFlare</a> 的域名解析服务。他们还能为你的域名提供一个免费（聊胜于无）的 CDN 服务。我已经将这个博客、我的 rsshub 实例和我的 ttrss 实例都放到了 cf 上解析。</p><p>ttrss 实例应该设置为 Type A，<code>Name</code> 应该是 <code>www</code> 或者其他你想要的东西，比方说 <code>ttrss.example.com</code> 的网址，<code>Name</code> 就应该是 <code>ttrss</code>。</p><p>设置完域名解析服务后你还可以顺手打开 <code>SSL/TLS 加密</code>。关于这个我也不是很懂，我尝试过 <code>Flexible</code> 和 <code>Full</code>，在我的服务端配置下似乎都能正常使用。</p><p>操作完成之后，我的 ttrss 站点检测结果如下：</p><p><img src="/images/blog/2019-08-11-19-41-44.png" alt="ssllabs的检测结果"></p><p>现在，ttrss 站点可以正常使用了！</p><h3 id="在手机上使用"><a href="#在手机上使用" class="headerlink" title="在手机上使用"></a>在手机上使用</h3><p>安卓上我不知道什么 rss 阅读器好用，而且还要支持 ttrss 账号。在 IOS 设备上，我使用 <code>Reeder</code> 来查看 rss 订阅。<a href="https://ttrss.henry.wang/">Awesome-TTRSS</a> 中已经内置了 <code>Fever</code> 插件，只要在设置中开启即可。当然，别忘记在设置中选中 <code>允许外部客户端通过 API 来访问该账户</code>，这样才能让 <code>Reeder</code> 访问你的 ttrss 实例。</p><p><img src="/images/blog/2019-11-12-00-14-29.png" alt="Reeder 在手机上设置完之后的样子"></p><p><img src="/images/blog/2019-11-12-00-16-46.png" alt="文章阅读界面"></p><p>阅读效果相当舒服，还能在网页版和手机端之间同步阅读记录。这样在地铁上读过的文章你就不会在网页端发现它还是未读状态了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有一个比较遗憾的地方就是在 Windows 上我没有发现合适的可以使用 ttrss 同步的 rss 阅读器，所以在 Windows 端应该还是要用网页版来阅读 ttrss 文章。但总的来说我现在使用 rss 获取信息的方式让我非常满意。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇文章从八月份开始一直到十一月才写完。中间这段时间我的工作也是慢慢变得多了起来，所以一直很忙也没时间写任何东西。但还好，我觉得我写博客的热情还没有被消磨掉。这段时间我买了二手的 LG G30 和联想拯救者 Y9000X，之后可能有时间会写一下这两个产品的使用体验。</p>]]></content>
    
    
    <summary type="html">A W S L</summary>
    
    
    
    <category term="使用方法" scheme="https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
    <category term="Web 端开发" scheme="https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Web-%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="RSS" scheme="https://blog.rekidunois.cc/tags/RSS/"/>
    
    <category term="TTRSS" scheme="https://blog.rekidunois.cc/tags/TTRSS/"/>
    
    <category term="HTTPS" scheme="https://blog.rekidunois.cc/tags/HTTPS/"/>
    
    <category term="Docker" scheme="https://blog.rekidunois.cc/tags/Docker/"/>
    
    <category term="Fever" scheme="https://blog.rekidunois.cc/tags/Fever/"/>
    
    <category term="Reeder" scheme="https://blog.rekidunois.cc/tags/Reeder/"/>
    
  </entry>
  
  <entry>
    <title>咸鱼 Ingress 玩家的两次 IFS 之旅</title>
    <link href="https://blog.rekidunois.cc/2019/08/Ingress-IFS/"/>
    <id>https://blog.rekidunois.cc/2019/08/Ingress-IFS/</id>
    <published>2019-08-10T16:00:00.000Z</published>
    <updated>2021-07-06T13:17:10.697Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>IFS 是 Ingress First Saturday 的缩写</p></blockquote><p>Ingress 是一款让我感到很神奇的游戏。一方面她的游戏玩法其实比较单调，但另一方面她可能会让你投入与其他游戏截然不同的东西，自然，收获也是截然不同的。</p><p>Ingress 社区每个月都会有一次活动，这项活动旨在帮助新入坑的玩家更快地了解这款游戏，并且升级。这项活动由玩家申请，以城市为单位举行。参加活动的玩家在活动规定的2个小时内，获取到的 AP (即该游戏中类似经验的数值)在活动结束后会有一个双倍时间的奖励。在活动开始之前玩家需要对签到 Po 进行 Hack，并向所属阵营的 POC 进行签到。POC 会在签到时记录玩家等级、行动距离、AP 数等数据，在活动结束后，玩家再次向 POC 签退，以便 POC 统计活动时间内玩家取得的成绩。</p><p>玩家需要在活动时间内 Hack 任意两个 Po，并在两次 Hack 之间取得至少5000点的 AP 点数。但是活动时双方阵营的玩家都在现场，基本上是一直可以刷 AP 的状态。一方阵营装上了脚，另一方马上炸掉并装上自己阵营的脚，如此反复。确实诚如 IFS 活动介绍所言，即使是新人也可以很容易地在这个活动中刷出大量的 AP。</p><p>7月份的 IFS 是我第一次参加的 Ingress 活动，甚至是我第一次参加游戏相关的线下活动。活动下午三点开始，那天天气特别的热，我在做完活动任务之后就回到集合地点的星巴克坐着刷 AP 了。而其实 IFS 也可以在签到后去别的地方刷 AP，不管是拉多重还是其他的行动都可以。不过那天实在是太热了，很多人都选择坐在星巴克聊天。但也有人能在沙发上刷了20几万 AP，真实沙发战神。</p><p><img src="/images/blog/2019-08-06-11-50-25.png" alt="两次 IFS 组织者们设计的 Bio Card"></p><p>活动不留点纪念品怎么能行呢？深圳的 IFS 一般是有两个地方同时举行，方便在深圳不同地方的玩家参与，于是 Bio Card 就一式两份。两个月的 Bio Card 设计都非常精美，非常契合活动选址的地方。侨城东+深圳北是7月的两个地址，所以 Bio Card 就在背面设计了与方位有关的指南针图案。而8月的两个地点刚好都是深圳地铁1号线和3号线的交汇处，而这两条地铁线的颜色刚好是 Ingress 里两个阵营的代表色——蓝色和绿色，于是 Bio Card 的设计就是在两张卡面上画出两个地点的地铁路线的形状，并且两张卡还能拼接在一起。</p><p><img src="/images/blog/2019-08-11-00-06-45.png" alt="官方提供的一些 Bio Card"></p><p>中间的几张人物卡是官方的动画中出现的人物，而左右两边的卡都是官方推出的类似于宣传广告一样的 Bio Card。然后左边的这张卡背面还附赠了一个可以用于兑换游戏内的道具的 Code。不过我印象中只有8月份的 IFS 遇到了官方人员就是了。</p><p><img src="/images/blog/2019-08-11-00-10-26.png" alt="各位dalao们的 Bio Card"></p><p>有许多资深玩家会印制自己的 Bio Card, 相当于是给自己与 Ingress 相关的身份做了一张名片，而玩家们也会互相交换来认识彼此。看以后有机会我自己也去做一些，不知道有没有人要（</p><p>如果不是 Ingress，我来到深圳之后出门的理由真的是屈指可数。毕竟我自己一个人在家就能过整个黄金周乃至整个暑假，完全不会觉得无聊。但是当入坑 Ingress 之后，我就变得非常期待每个月 IFS 的时候出门活动了。而且每周三下午本来公司组织大家去打球，我也在规划每周的这天出去摸任务。当然最近的天气对于户外活动过于不友好，每次出门都感觉和洗热水澡一样，可能只有晚上比较适合出门摸一摸 Po 了。</p><h2 id="一点关于-Ingress-的思考"><a href="#一点关于-Ingress-的思考" class="headerlink" title="一点关于 Ingress 的思考"></a>一点关于 Ingress 的思考</h2><p>在 Ingress 之前我所接触的手机游戏，要么都是抽卡游戏并且占用你的时间，也就是当我想要打发时间不想动脑的时候去玩；要么就是有音游因素的游戏。我的想法是这些游戏其实从承载平台的角度来看，其实没有什么值得称道的地方。认为智能手机的出现是对个人电脑的一种改朝换代的革新的人们，在游戏这个领域总是说手游的营收远超传统单机类的游戏，也超过了 PC 端游。可问题在于，所有这些营收爆表的游戏，几乎都可以在 PC 上玩。使用手柄来操作也是非常适合，甚至比触摸屏更好。甚至其中的一些操作，基本就是在触摸屏上对手柄键位的镜像，以至于针对这些游戏还出现了一种把游戏手柄按键放在触摸屏上的外设。</p><p>也就是说，这些爆款手游，都没有在游戏玩法层面上，突破原本的游戏平台的束缚。主机使用手柄作为操作工具，这一标准发展到今天依旧富有生命力。而等游戏出现在 PC 之后，键盘和鼠标作为操作方式又为竞技类游戏发展出了新的一片天地：FPS、RTS和MOBA是很难用手柄抗衡键鼠的。甚至在 OSU 这个游戏中还出现了键盘+触控板的组合。PC 游戏有能力在游戏发展史上划上浓墨重彩的一笔也是这个原因，它扩展了游戏的种类，丰富了她的玩法。而手游如果想要在历史上留下属于自己的一笔，势必要依靠与手柄和键鼠都不同的人机交互方式，来扩展属于自己的游戏种类和玩法。而 Ingress，以及同一个公司出品的 Pokemon GO，还有微软即将推出的我的世界 AR 游戏，就属于扩展游戏种类的先驱者。他们找到了智能手机的独特之处，并希望在游戏中充分发挥这些特点。这样的游戏才能在游戏史上拥有自己的一席之地。</p><p>从主机的发展历史来看，平台的设计者如何设计自己的平台，对于自家平台上的游戏会有相当大的影响。即使这些游戏属于第三方，交互设计依旧会在他们设计游戏的时候造成影响。手机应该也不能例外。各大手机厂商以及两个手机系统的设计公司，首先要对智能手机的人机交互做更多的完善和创新，他们要成为游戏设计厂商的引路人，向厂商揭示手机这个平台的独特性和特点。这样游戏开发者才能根据这些来设计独特的玩法，当然也不排除手机厂商亲自下场。总之，手机游戏的发展并不只是想做游戏的公司会参与其中，很多与游戏不相关的公司，也会以各种各样的方式影响到游戏的玩法。</p>]]></content>
    
    
    <summary type="html">准备出门本身就是一件乐趣——寻找理由时的乐趣</summary>
    
    
    
    <category term="手机游戏" scheme="https://blog.rekidunois.cc/categories/%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/"/>
    
    
    <category term="Ingress" scheme="https://blog.rekidunois.cc/tags/Ingress/"/>
    
    <category term="IFS" scheme="https://blog.rekidunois.cc/tags/IFS/"/>
    
    <category term="户外活动" scheme="https://blog.rekidunois.cc/tags/%E6%88%B7%E5%A4%96%E6%B4%BB%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>我的 Https 之旅--GitHub Page 更换域名</title>
    <link href="https://blog.rekidunois.cc/2019/06/Use-Https-In-GitHub-Page/"/>
    <id>https://blog.rekidunois.cc/2019/06/Use-Https-In-GitHub-Page/</id>
    <published>2019-06-29T16:00:00.000Z</published>
    <updated>2020-06-28T09:33:54.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在GitHub Page使用自己的域名</p></blockquote><p>fork原博客的时候我就发现可以通过指定 <code>CNAME</code> 来让 <code>username.github.io</code> 的url跳转到你指定的网址. 所以在咨询了朋友之后, 便决定将这个博客的域名换成自己的域名 <code>rekidunois.cn</code>.</p><p>首先是在仓库里创建 <code>CNAME</code> 文件, 在里面设定域名 <code>blog.rekidunois.cn</code> (后来发现其实也可以直接在sitting里设置). 之后在域名的dns服务提供商里设置域名解析. 这里我使用了cloudflare作为我的dns服务提供商. 在使用它的dns服务之前, 我们需要先去域名注册机构(比如我在腾讯云购买的域名)将 <code>rekidunois.cn</code> 的dns设置为cloudflare的dns, 这样cf的域名解析服务就能使用了.</p><p>添加域名解析中的CNAME记录, 将其指向 <code>rekidunois.github.io</code>, 这时候应该可以使用 <code>blog.rekidunois.cn</code> 来访问博客了. 只是我们需要在cf中做https相关设置后, 浏览器才不会将我的博客标记为不安全. 查询了一些资料之后, 我在Crypto中将SSL选项置为 <code>Fleible</code> 方式. 并且开启了 <code>Always Use HTTPS</code> 选项. 这时我发现GitHub库中的设置里还有一个选项是启用https, 我便将它勾选. 过了一段时间之后, <code>blog.rekidunois.cn</code> 就能够正常访问并且浏览器里出现那把锁了.</p><p>这里可能会遇到一些坑, 比方说页面中如果有一些引用的脚本, 脚本所创建的图片可能会无法加载. 博客标签页的icon也可能会无法显示. 而通过引用脚本启用的功能(如gitalk)也会出现无法加载的情况. 而如果浏览器地址栏出现了『该网站试图从不安全的来源加载脚本』(我记不清具体的表述, 反正大概是这个意思)这样的提示的话, 请不要手动让浏览器加载这些脚本, 因为这会让浏览器将你的网站标记为不安全.</p><p>总的来说这个https还算是比较简单的设置, 我甚至没有敲任何一个命令就解决了问题. 下一个目标是将部署好的ttrss完全https化. 成功之后大概也会写一篇文章来记录整个ttrss的部署历程吧.</p>]]></content>
    
    
    <summary type="html">小绿锁，yes！</summary>
    
    
    
    <category term="使用方法" scheme="https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
    <category term="Web 端开发" scheme="https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Web-%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="GitHub Page" scheme="https://blog.rekidunois.cc/tags/GitHub-Page/"/>
    
    <category term="https" scheme="https://blog.rekidunois.cc/tags/https/"/>
    
    <category term="cloudflare" scheme="https://blog.rekidunois.cc/tags/cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>本地编辑 Markdown 时粘贴图片自动插入 Markdown 图片格式</title>
    <link href="https://blog.rekidunois.cc/2019/06/MarkDown-And-VS-Code/"/>
    <id>https://blog.rekidunois.cc/2019/06/MarkDown-And-VS-Code/</id>
    <published>2019-06-05T16:00:00.000Z</published>
    <updated>2020-06-28T09:33:41.137Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这可能是持续写整个博客的基础操作</p></blockquote><p>&ensp;&ensp;&ensp;&ensp;在折腾了那么久之后, 我还是回到使用静态网页搭建博客的方式来. 毕竟markdown那么好用, 我也不舍得放下这个工具. 在步入社会开始工作之后我就发现, 即使工作的时候没有直接要求你用你觉得很好用的东西, 你也可以自己去设法使用这些你认为用起来很舒服的道具. 在折腾成功之后会有莫大的满足感, 而且日常使用也会提升工作体验, 何乐而不为.</p><p>&ensp;&ensp;&ensp;&ensp;但是markdown暂时还没有能在我的工作中有所应用. 可能以后写文档能用上吧, 谁知道呢（ 那么, 简单讲一下这个博客的工作流程. 非常简单, 那就是在本地编辑markdown文件, 然后 <code>git commit</code> 并且push到GitHub里叫做 <code>UserName.github.io</code> 的库里, 这样你的新文章就会被解析并在 <code>https://UserName.github.io</code> 中可以访问. 之所以使用markdown, 有很多人给出了分析, 我这里就讲一点: markdown在写作的时候, 可以让你的双手几乎不离开键盘, 就完成排版和修改格式等等操作. 如果要在其他的文字工作方式中实现这一点, 就我所知可能只有ThinkPad的小红点可以做到让用户在工作的时候双手不离开键盘打字区.</p><p>&ensp;&ensp;&ensp;&ensp;那么, 有一个非常现实的问题就出现了: 我写文章并不光是只有文字（太长的文字也没人看鸭）, 还需要插入图片. 在markdown中是可以很方便地插入图片, 不管是本地的图片还是图床中的图片, 都可以插入. 问题在于, 手动输入图片的url或者本地路径怎么样都不是一个舒服而且高效率的方式. 在Windows上编辑文章, 图片还是以剪贴板的复制粘贴操作来插入图片最为舒服. 所以本篇文章的意义就是在于, 如何在VS Code中配置粘贴图片自动拷贝到本地的特定目录, 并且在markdown文本中输入引用图片的格式, 让图片可以被正确地显示.</p><h2 id="寻找工具"><a href="#寻找工具" class="headerlink" title="寻找工具"></a>寻找工具</h2><p>&ensp;&ensp;&ensp;&ensp;既然是VS Code, 那么第一反应是使用插件来实现这一功能. 优秀的第三方插件支持也是VS Code得以立足于编辑器市场的重要特点. 在Google了一阵之后, 很快就发现了两款可以实现相应功能的插件: <a href="https://marketplace.visualstudio.com/items?itemName=Spades.vs-picgo">Picgo</a> 和 <a href="https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image">Paste Image</a>. Picgo是开源的作品, 在GitHub上也可以找到它的 <a href="https://github.com/PicGo/vs-picgo">repo</a>, 但是安装后发现它重点在于如何在VS Code编辑markdown文件时, 上传图片到图床中. 既然我们决定将整个博客都放入一个GitHub repo, 那么我们似乎不是很需要上传到其他的图床里.</p><p>&ensp;&ensp;&ensp;&ensp;另外一款插件Paste Image, 名字非常的直截了当, 功能也是基本能满足需求. 可以直接以快捷键的方式粘贴图片到markdown中, 通过一番设置之后, 达成了我只需要commit就可以完整更新博客文章的效果. 下面贴一下设置的方式:</p><p><img src="/images/blog/2019-06-06-00-03-25.png" alt="BasePath"></p><p>放置图片的根目录. 其中变量 <code>$&#123;projectRoot&#125;</code> 是插件提供, 这里提供的是你blog repo在本地的绝对路径, images是想要放置所有博客图片的文件夹. 这里会有一个问题, 我们下面继续说</p><p><img src="/images/blog/2019-06-06-00-08-51.png" alt="Image Path"></p><p>其实本来, 所有的图片就放在一个文件夹里是可以的. 但是这个博客的文章还是有所分类, 并不是所有都是博客文章. 比方说有一些大段的工具使用方法, 就不适合作为博客文章发出, 而应该以wiki的形式储存. 所以在这个地方对图片进行分类也是有必要的. 问题就在于, 我没有找到方法可以让我在插入图片的时候根据编辑文件所在地址来决定<code>images</code>文件夹中图片要放到哪个子文件夹里. 所以这里也只能先写死.</p><p><img src="/images/blog/2019-06-06-00-12-26.png" alt="Insert Pattern"></p><p>这个地方拼接的字符串就是在markdown文本中要输入的图片路径, 所以应该是相对路径而不是绝对路径, 那么 <code>$&#123;projectRoot&#125;</code> 这个变量就没法使用了, 毕竟输出的是绝对路径. 然后 <code>images</code> 也没有其他变量可以生成这个路径, 所以也只能写死…</p><p>&ensp;&ensp;&ensp;&ensp;经过以上配置之后, 使用快捷键 <code>Ctrl + Alt + v</code> 就可以将剪贴板中的图片自动拷贝到指定路径, 并且在markdown文本中输入正确的显示字段了. 最后吐槽一下VS Code, 使用了Synax插件同步配置但是突然失效不说, 插件本身居然不告诉我没有拉取远程配置, 而是报告同步成功, 我???? 其实VS Code应该去用yaml之类的格式当配置文件的, 会舒服很多. 明天到了上班的地方还要在那里的电脑再弄一次.</p>]]></content>
    
    
    <summary type="html">这可能是持续写整个博客的基础操作</summary>
    
    
    
    <category term="使用方法" scheme="https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
    <category term="VS Code" scheme="https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/VS-Code/"/>
    
    
    <category term="VS Code" scheme="https://blog.rekidunois.cc/tags/VS-Code/"/>
    
    <category term="Picgo" scheme="https://blog.rekidunois.cc/tags/Picgo/"/>
    
    <category term="Paste Image" scheme="https://blog.rekidunois.cc/tags/Paste-Image/"/>
    
    <category term="markdown" scheme="https://blog.rekidunois.cc/tags/markdown/"/>
    
    <category term="github" scheme="https://blog.rekidunois.cc/tags/github/"/>
    
  </entry>
  
</feed>
