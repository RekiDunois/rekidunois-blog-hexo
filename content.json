{"meta":{"title":"Reki家地下的大书架","subtitle":"ん…？べ、別に退屈とかしてないし…。してないんだから！ホントよ？","description":"文章应该放到这里来嘛...","author":"Reki Dunois","url":"https://blog.rekidunois.cc","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-12-09T09:00:35.506Z","updated":"2020-06-29T04:17:15.728Z","comments":false,"path":"/404.html","permalink":"https://blog.rekidunois.cc/404","excerpt":"","text":"你来到这个页面，通常有两个原因。 一、链接错误例子：《中文文案排版指北（简体中文版）》的链接是 1http://mzlog.com/wiki/chinese-copywriting-guidelines/ 请修改成 1https://mazhuang.org/wiki/chinese-copywriting-guidelines/ 改动要点：将域名 mzlog.com 改成 mazhuang.org。 备用办法： 在「分类」中找。 二、维度攻击除此以外，所有我发给您的链接都经过测试，不能访问大概只能是因为你的IPS，政府，学校或者雇佣者禁止您访问我的网站"},{"title":"书单","date":"2020-12-09T09:00:35.507Z","updated":"2020-06-28T03:49:26.896Z","comments":false,"path":"books/index.html","permalink":"https://blog.rekidunois.cc/books/","excerpt":"","text":""},{"title":"关于","date":"2020-12-09T09:00:35.507Z","updated":"2020-06-29T04:17:07.263Z","comments":false,"path":"/about/index.html","permalink":"https://blog.rekidunois.cc/about/","excerpt":"","text":""},{"title":"分类","date":"2020-12-09T08:53:45.696Z","updated":"2020-06-29T04:25:38.282Z","comments":false,"path":"categories/index.html","permalink":"https://blog.rekidunois.cc/categories/","excerpt":"","text":""},{"title":"Repositories","date":"2020-12-09T09:00:35.507Z","updated":"2020-06-28T03:49:26.898Z","comments":false,"path":"repository/index.html","permalink":"https://blog.rekidunois.cc/repository/","excerpt":"","text":""},{"title":"友情链接","date":"2020-12-09T09:00:35.507Z","updated":"2020-06-28T03:49:26.897Z","comments":true,"path":"links/index.html","permalink":"https://blog.rekidunois.cc/links/","excerpt":"","text":""},{"title":"标签","date":"2020-12-09T08:53:45.696Z","updated":"2020-06-29T04:20:20.945Z","comments":false,"path":"tags/index.html","permalink":"https://blog.rekidunois.cc/tags/","excerpt":"","text":""}],"posts":[{"title":"Notion 随笔集合（一）","slug":"Notion-Nonsense-EP1","date":"2020-12-09T09:14:26.661Z","updated":"2020-12-09T09:15:01.452Z","comments":true,"path":"2020/12/Notion-Nonsense-EP1/","link":"","permalink":"https://blog.rekidunois.cc/2020/12/Notion-Nonsense-EP1/","excerpt":"","text":"今年某个时候决定开始使用 Notion，它有一个非常爽的功能就是可以直接将网页的内容保存到你的 Notion 笔记里。所以很方便用来做笔记，也很方便写些什么。 我发现自己标注为随笔的一个页面已经写了不少东西了，决定整理一下发到博客里（主要是想水博客） Notion 小记唯一的遗憾就是无法离线你的笔记。昨天我家里网络有点问题，所以很多东西都不能传上去或者修改之类的。其他的地方我觉得都非常好。 再研究一下模板之类的怎么用，然后看看有没有必要付费使用。我觉得 VS Code 要做到 Notion 这样的效果还需要专门的插件才能做到。 当然 Notion 自己也没有插件这样的东西，也有一些需求 评论：这后面是不是有什么话没说完？ 20200810看起来，Windows上的程序主窗口一个必须要做的事情就是客制化边框、标题栏和右上角的三个按钮，不然内里的UI做的再精美，整个软件的档次感觉就下降了（潜台词就是默认边框丑） 评论：看起来并不是按照时间排列的以及：其实很多软件都只是停留在做自己的标题栏，并没有给边框增加圆角。 Notion的网络…桌面的软件不知道为什么总是会上传失败，不管是文件还是图片。 后来我发现网页版也还行，并且没有这个问题，看来还是要用网页版。 看看能不能安装网页app 评论：结果现在都是用网页然后安装成应用在用了。但是网络确实非常慢，只是好歹能用 2020年8月13日优质键政是很能引人思考引人向上的力量。 劣质键政还不如打游戏，对喷键政不如打游戏对喷。 评论：劣质键政容易让人睡不着觉 2020年8月16日还是太菜了，菜到连公司都看不下去了。 当然准时下班是少不了的。所以以后要经常把电脑带回家，现在还不到我回家就玩游戏的时候，还是要多练习代码才能以后天天玩游戏。 不过最近是真的忙。 评论：其实我自己学的东西真的很少有东西能应用到工作中来，毕竟公司用的是 2013 年的东西（ 2020年8月18日原来三湾改编的内容如此简单，却又如此强而有力 我好想打完活动，好想接着肝泳装，又好想肝wows，事情太多根本忙不过来 评论：又是砍口垒开活动的时节，wows 没啥想肝的了，然后就入坑了明日方舟。对于砍口垒我只有一句话：坐而言不如起而行。 2020年8月20日还是很担心被开… 确实给私人老板打工不容易。 虽然我这个月工资似乎涨了？ 我还是多写写算法题吧（ 评论：啊原来我涨过工资的吗 2020年9月15日买了小号的红轴键盘放办公室，舒服了很多，右手不用拐出去了 但是桌面感觉还是差点意思。姑且买了亚克力架子，可以在上面放书 问题就是再买一个屏幕的耗费有点大，不知道要不要弄。毕竟（ 评论：家里也是 84 键的，不过是青轴，真的挺舒服的，当然要记得装额外的小键盘。 日期不知道为什么，在副屏幕打字总有点卡卡的 不过好象是 telegram 的问题，在 notion 里打字就不会有这种感觉 好神奇，只有 telegram 打字会有这种延迟的感觉，但是在 notion 里就完全不会 我感觉调成两边一致两边都有点卡卡的，但是因为我主屏幕是 144 所以可能感觉不太出来，动画会流畅很多 然后使用 notion 就完全没有区别了，基本看不出来 （144 真强啊） 评论：其实这个是 telegram 的问题，时不时会出现打字的时候 cpu 飙升然后就变卡，所以现在 Unigram 和 Telegram 混着用。 2020-12-05（看这个标题，是用小狼毫自动生成的日期！）Telegram 突然爆炸了不知道为什么… 然后我还是处于想要写点什么，那就还是来这里写吧。 今天把 2k 屏幕的缩放调到了自定义的 115%，看起来比 100% 要舒服很多。 并且切换到了 Unigram，打字终于不会卡了。 然后它服务器就爆炸了。 xaml 的学习曲线确实非常陡峭，只是弄些皮毛都是举步维艰的。 不过 WinUi 提供的控件确实好用。 我觉得还是把我的 Twitter 锁起来比较好。 考虑把这里的随笔整理一下发博客。 评论：然后现在发出来了（ 2020-12-06我感觉我学东西好慢啊… 好多进一步开发需要的东西我都花好长时间才能学会。 学会之后发现，那只不过是一层窗户纸，一捅就破。 然后实际上也没学到太多。 评论：昨天晚上睡不着看 AutoFac 的时候就有这种感觉，自己终于开始理解什么是依赖注入而且自己以前明明就做过类似的操作。 PS：原来 hexo 是看 MarkDown 文件创建日期来决定文章的发布日期的","categories":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/"},{"name":"胡言乱语","slug":"随笔/胡言乱语","permalink":"https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"}],"tags":[{"name":"杂谈, 生活","slug":"杂谈-生活","permalink":"https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88-%E7%94%9F%E6%B4%BB/"}]},{"title":"正式工作一年半（实习以来两年半）的一点碎碎念","slug":"One-Year-For-Work","date":"2020-11-18T10:27:30.609Z","updated":"2020-11-18T10:27:31.036Z","comments":true,"path":"2020/11/One-Year-For-Work/","link":"","permalink":"https://blog.rekidunois.cc/2020/11/One-Year-For-Work/","excerpt":"","text":"Tempora mutantur, nos et mutamur in illis; 大学以前我最想要的东西就是一台个人电脑。但是家里只有一台老旧的电脑，还是和爸妈共用的，为了多少能体验一下电子设备，省吃俭用买了台三百块的手机，爸妈知道后我还被骂了一顿。 大学以后我最想要的就是自己一个人住的单间，因为学校宿舍的条件实在太过恶劣。但是在大学我还是用电脑做了很多事情，虽然那台电脑特别破。 实习被我认为是逃离垃圾大学的第一步。实习之前有个和学校合作的培训公司跑过来给全班人强制培训，因为内容是硬件所以我毫无兴趣（并且据熟悉硬件的舍友说，他教的东西大一学生都会做，而且他还真的让他一个大一学弟来顶替他上课）。这时候接到了现在这家公司的面试请求，于是请假跑去深圳面试，住了一天然后回来（这样可以请两天假不去培训）。最开始我不觉得我能过，因为我以为他们是用 c# 和 .Net 的公司，结果面试题是 c。然后我 c 基本学的一塌糊涂，cs 基础几乎等于没有（因为学校都没教，我也不知道该学啥）。唯一会的就是链表，而且还很多错。 没想到最后居然同意我实习了。同期有两个毕业生，他们试用期我实习期。最开始的日子非常悠闲，甚至没有布置任务。由于旧的办公室人坐满了，我们三个是在隔壁楼新租的办公室。没有上司看着你工作，再加上任务没布置/布置了也没有很重，同期的一个人甚至买了台 Xbox 放办公室里，接办公室的 4k 屏玩大镖客。 实习的结果，我没有按时完成我的第一个任务。虽然相关代码在 dead line 前两天才给我，我要从其中一个项目迁移到另一个项目中。开发途中的需求也不断修改，而且事后我觉得，这个需求并不是非常好做。我当时害怕及了，HR 并没有跟我聊有关转正的事情，我已经做好了毕业去重新找工作的准备了。结果之后我还是安全转正了，并且顺利负责了其他的项目。 在经历了蠢的要死的毕业设计，跟副院长斗智斗勇之后，总算是顺利毕业了。成为了正式工，我却感觉和实习的时候没有特别大的区别。给我分配的项目依旧很少，以至于很多需要提供的需求在 deadline 之前几天才会给我。而我秉承不想加班的理念，很多项目被几个人一起顺理成章地拖慢了。这时候我渐渐发现了公司代码的一些问题。 提报的闪退，崩溃问题非常多，但是我们的日志输出是很乱的，并且崩溃在日志上也不一定能看得出来。我觉得 c++ 要规避很多崩溃问题，肯定需要添加单元测试。但是整个公司的 c++ 项目使用的还是 msvc 2013 版本的编译器，并且使用比较旧版本的 Qt，新的测试项目引用这些代码之后不能通过编译，添加单元测试的想法一直停留在想法里。我不确定我这个项目能不能升级，升级之后其他的项目要不要一起升级，愿不愿意升级。总之就是和大多数代码故事里说的一样，屎山依旧是屎山，很难改变。 我想了很多办法提升开发体验。甚至想过用 .Net 重构一个项目。其实最近需要上架微软商城的需求，就是重构的好时机，但是上司直接说：我们不可能用微软的技术栈重新写一个项目。所以这条路就死了。停留在旧代码的这个项目，在之后的迭代中会发生什么事情真的难以预料。 我每修改一行代码就在担心，这样会不会导致崩溃，会不会功能不正确，会不会让我的评价进一步降低？之前 hr 已经和我聊过说测试认为我发的版本质量比其他人都低，我说没办法啊，要么你加班自己测试各种情况测出来再改，改完了再发版本。要么写单元测试代码，规避常见错误的同时，对于以前已经发生过的错误也能保证修改代码后不会再次出现。 但是说实话，我自己有几斤几两很清楚。我是个下决心要学 WPF 然后研究了半天项目结构如何组织，最后慢慢就放弃了的菜鸡程序员。崩溃问题我自己写出来的也有很多，低级错误也没少犯。以至于到今天我写每一行代码都还是战战兢兢，思前想后，畏首畏尾。发的每一个版本都害怕会不会出现问题，奇奇怪怪的 Windows Api 经常看半天不知道他要干嘛。自己喜欢的技术，也经常觉得自己是叶公好龙，看半天一个能看的玩意儿都做不出来。渐渐的我也失去了追求更好的技术的信心，每天除了工作就只是打游戏。 最近开始研究 WinUI，发现里面提供了非常多开箱即用的东西，而且不一定非得写 UWP，可以写 Win32，感觉之前碎片化学习的东西，慢慢都能一点点组合起来用了。感觉重拾了一点点信心，开始搞很久以前就想做的音乐播放器了。希望这一次不要半途而废吧。 这三年来我玩的游戏可能没有大学三年多，但是玩的时间说不定比大学三年长，而且常玩的游戏居然没什么特别大的变化。砍口垒，wows，fgo，风暴英雄，文明6。最近开始玩方舟，塔防游戏也能算是我很喜欢的游戏类型，唯一玩的变少的游戏可能是音游了吧。感觉自己反应真的不如高考完那时候好了，很多当时能 fc 的曲子现在怎么打怎么死。 其实对我来说，游戏和编程区别也不算大。都是我的爱好，只是编程是有学习曲线的，你在其中遇到的挫折会比游戏多得多。而游戏开发者肯定希望你花更多的时间在游戏上，所以你可能遇到的挫折更少，或者更容易克服。虽然我游戏玩的也不是很好，但我还是希望我编程也能像游戏一样，总能找到令我满意的解。 出来社会一年多，其实我内心感觉以前的朋友门混的大概都比我好。爸妈嘴巴上说着你开心就好，实际上买房买车找老婆，交家用，这些其他人要考虑的事情他们一个也没有少想。只是我们之间交流不如其他父母和孩子之间深入，我又是能不说话就不说话的性格，所以聊的不是很多吧。很多事情我有默默在做，但是非让我说出来我更倾向于保持沉默。「老死不相往来」是我觉得我对现实人际关系的一种犬儒。先不论父母，朋友什么的我觉得我已经伤害了很多人的感情了，与其继续接触新的朋友然后再伤害他们，不如不要和更多的人交流，以免有人受伤。 毕业的时候我与自己顶下了三年之约，三年后的自己要更加优秀，让自己更满意，找到更好的工作。三年过半，我觉得这个约定可能非常难实现了。但是好在自己也不能把自己怎么样，这个约定不管是三年还是五年，我都会一直往前走，直到真正实现这个约定为止。 希望与未来的自己相遇在更加广阔的海洋上 The end","categories":[{"name":"胡言乱语","slug":"胡言乱语","permalink":"https://blog.rekidunois.cc/categories/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"},{"name":"阶段总结","slug":"胡言乱语/阶段总结","permalink":"https://blog.rekidunois.cc/categories/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"杂谈, 时间, 工作, 生活","slug":"杂谈-时间-工作-生活","permalink":"https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88-%E6%97%B6%E9%97%B4-%E5%B7%A5%E4%BD%9C-%E7%94%9F%E6%B4%BB/"}]},{"title":"2020年的iPad能为你做什么?","slug":"iPad-mini5-Reviews","date":"2020-06-19T16:00:00.000Z","updated":"2020-06-28T09:33:07.055Z","comments":true,"path":"2020/06/iPad-mini5-Reviews/","link":"","permalink":"https://blog.rekidunois.cc/2020/06/iPad-mini5-Reviews/","excerpt":"","text":"iPhone: 用户不知道他们想要什么, 直到我们推出了产品iPad: 公司不知道用户想要什么, 直到用户买了产品 从 iPad Pro 开始, 苹果就有意增强 iPad 办公方面的能力. 而在此之前 iPad 是主打娱乐功能的产品. 看个视频打个游戏, 屏幕又大续航又好, 在平板电脑这个领域其综合实力超过了绝大多数的对手, 唯一的短板便是生产力这一块. 而随着 Windows 平板和 Chrome OS 在生产工具端的发力, iPad 确确实实感受到了压力, 比如说在教育领域. 市场如何变化其实我并不关心, 我比较感兴趣的是各种设备的功能. iPad 本来对于我也确实只是娱乐设备, 用来看看视频打打游戏非常方便. 但, iPadOS 的生产力更新真的于我而言毫无作用吗? 生产力=键盘+鼠标我手上的这款是 iPad mini 5. 论性能和续航都算是比较 OK 的产品, 还能使用 apple pencil. 但是你拿他当生产力用有个问题: 你需要长时间低头, 或者长时间举手. 放在桌子上手不用举起来, 但是颈椎要向下弯, 对于我这种显示器都要用支架弄到和我视线平齐的人来说, 自然是非常不爽的. 而如果把 iPad 也挂起来, 或者用手举着, 怎么说长时间都会很累. 要长时间使用它, iOS 13 更新后支持的蓝牙鼠标键盘连接就非常有必要了. 因为你可以把它挂起来然后手放在桌子上操作, 脖子也不用一直低着. 并且 iPadOS 13.4 更新之后的鼠标连接比之前的也更棒了: 光标更好看, 动画效果更多更直观. 为此, 我购入了罗技 K380 和 M336 键盘鼠标, 来配合我的 mini5 使用. K380: 中规中矩我对蓝牙键盘还是有一定的便携需求, 所以没有用手上那把红轴机械. 再加上本来这把机械的蓝牙就不是很好, 我现在都是用有线模式来使用, 在京东购买了 K380, 我认为还是比较值得的. 她就是一块普通的笔记本键盘, 拆下来加上蓝牙的那种感觉. 手感还算过得去, 不会因为需要便携性而弄的过于狭窄, 打字肯定没有问题. 没有小键盘, 有 Fin 键和功能键. 支持三个设备连接和切换, 蓝牙的开关就在外面, 开关起来很容易, 这也能节省电池的用量. 毕竟我那把红轴蓝牙就是因为蓝牙开关在背面, 每次要掀起来才能开关, 我就懒得关, 结果续航就尿崩, 几个星期就要换一次电池. 我的键盘比鼠标早一天到(因为我鼠标买错买成只支持2.4g的, 所以退掉重新下单了 M336), 鼠标没到的时候我就在研究键盘. 发现还是有不少快捷键可以用. 比方说和 Windows 逻辑一致的 Alt + tab 切换应用, 空格滚动网页等等. 剩下的就是各个 app 对快捷键的支持了. 长按 MacOS 上的 cmd 键可以看到当前 App 所支持的快捷键. 我用的应用还是有很多没有对键盘快捷键进行支持, 这也应该是支持连接键盘的设备不多的原因. 个人认为 iPadOS 要想在生产端发力, 那么应用对快捷键的支持肯定也是必不可少的. M336: 差强人意M336 是相对比较便宜的一款蓝牙鼠标, 她所支持的也只是蓝牙3.0协议. 而且对于我的手来说实在是有点小, 不得不使用抓鼠手法使用. 除此之外蓝牙输入设备会出现的卡顿也会出现, 但是也算是勉强够用的设备. 抛开鼠标本身的素质不谈, 鼠标 + iPad 绝对是如虎添翼一般的存在. 前面也有讲到我是把她挂起来使用的, 有了鼠标之后, 我就几乎能做所有事情了. 无论是码字, 阅读还是聊天, 我的 iPad 从此变成了一台小笔记本一般的存在. 浏览信息流, 看 rss 订阅, 和别人聊天, 用 OneNote 记笔记. 我一直苦恼于 Windows 上没有用的顺手的 RSS 阅读器, 这下我可以暂时不用烦恼了, 直接用 Reeder 就是了. iPad 除了满足生产力需求, 其娱乐能力也是非常不错的. 看视频就不说了, 我还在上面尝试了很多手游. 首先配合鼠标, 就可以很轻松地在桌面状态下玩手游, 而不必低着头或者把手机/平板举起来. 虽然如果要同时操作电脑和平板的时候, 要不停切换鼠标很难受, 但是其实从理论上来说, iPad 的画面是可以投射到 PC 上播放, 并且可以直接控制 iPad 的. 只是现在实现了这个功能的投屏接收端几乎没有而已. 如果实现了, 就可以用一套键鼠同时操作电脑和平板, 加上 Android 设备可以使用的 scrcpy, 移动设备就可以完全使用 PC 来控制, 操作体验上更加无缝了. 所以 iPad 的需求到底是什么?这其实是我一直以来相信的事情. 电子设备之所以会有平台之争, 一方面是因为商业公司之间会有竞争, 另一方面也是因为百花齐放才是这个领域保持缤纷多彩的原因之一. 所以作为用户, 如果在这个平台上有做不到的事情, 那就把能做到这件事的平台也拿来用就好了. iOS 上看不了 EHViewer, 那我就买一台 Android. Windows 上玩不了 FGO, 那我就去买一台 iPad. 如果有人说他可以用一台设备, 就处理生活, 工作和娱乐的所有事情, 那固然非常厉害. 但是如果我从 iOS 到 Android, 从 Windows 到 MacOs 全都用上, 那不也挺好的嘛? 现在我已经有了 iPad, 主力的手机是 iPhone, 副机是 Android, 可能就差一台 Mac 了. 但是因为我也没有用过 Mac, 并不确定 MacBook 和 iPad 之间是否会有重叠的需求. 我唯一能想到的就是 Mac 玩不了手游. 其他的 iPad 可能就只剩下续航和便携性了吧. 要论操控, 即使大家都希望 MacBook 能添加触屏, 但是我还是觉得自带键盘和触控板的 MacBook 要比 iPad 在操控方面是要好一点的. 虽然 iPad 现在可以添加这两样外设了. 另外 ,Apple Pencil 很好用, 用来画个示意图或者理清思路的时候非常方便. 就是一代的笔会经常忘记充电. 二代就好多了, 可以贴在 iPad 上无线充电, 只要 iPad 是有电的, 笔就不会没电. One more things不知道从什么时候开始, 新闻开始说苹果有意使用自家的 ARM 芯片来代替 MacBook 中的 Intel 芯片. 而两天后的 WWDC, 据说苹果会终于宣布一台使用 ARM 处理器来驱动的 MacBook. 不知道这一步对于 MacBook 和 iPad 来说都意味着什么, 但是我个人还是非常感兴趣的.","categories":[{"name":"产品体验","slug":"产品体验","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"},{"name":"平板电脑","slug":"产品体验/平板电脑","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E5%B9%B3%E6%9D%BF%E7%94%B5%E8%84%91/"}],"tags":[{"name":"iPad","slug":"iPad","permalink":"https://blog.rekidunois.cc/tags/iPad/"},{"name":"iOS 13","slug":"iOS-13","permalink":"https://blog.rekidunois.cc/tags/iOS-13/"}]},{"title":"最便宜的二手 835 安卓手机之一，我的第二台安卓智能设备！","slug":"LG-V30-Reviews","date":"2020-01-28T16:00:00.000Z","updated":"2020-06-28T09:33:20.430Z","comments":true,"path":"2020/01/LG-V30-Reviews/","link":"","permalink":"https://blog.rekidunois.cc/2020/01/LG-V30-Reviews/","excerpt":"","text":"买这部手机的目的就是，砍口垒，哈吉马路由! 前言其实严格来说, 我的第一台智能手机确实是安卓机. 是当年最便宜(300cny)就能买得到的酷派, 型号是啥忘记了. 甚至这 300 我还是跟同学借的无息贷款才能买. 然后同学也买了, 但是高考前两百多天他就被老师收了我的还在(逃 不过高考结束之后我就买了 iPhone 6, 并且一直用到了大四末尾才换了 iPhone 8. 而且即使换了之后, 我的 iPhone 6 还在作为我的游戏机继续服役(说着就拿出来摸了一下 PCR). 虽然我对于 iPhone 的怨言基本只有续航, 但是确实有些事情只有 Android 上才能做, 比方说砍口垒和 EHentai, 还有 PronHub, 还有被封禁的 Telegram 频道(虽然在之后的更新中 ios 也能浏览那种频道了). 所以说, 还是有必要弄一台 Android 手机的. 而且对 Android 进行各种调教, 这种乐趣在不对 iOS 进行越狱的现在, 也就只能在 Android 上才能体验到了. 最便宜的835?LG-V30 是 LG 在 2017 年发布的手机, 其实按理来说时间还不算很长, 你看隔壁小米 6 不也是 17 年发布的嘛(笑)这东西解锁没有什么难度, 也没有什么额外的溢价, 所以二手市场上价格还算可以. 我买的时候目测是比米 6 稍微便宜那么一点, 作为贫困人口当然就是选个便宜的完事了. 不过事后想想, 其实就砍口垒用不了 835 那么好的 soc, 虽然是前代旗舰, 但是总归功耗下不去, 续航方面就会比较尴尬, 特别还是二手机子. 嘛, 但是也不是什么坏选择, 好好用咯. 开始折腾淘宝上直接二手下单, 没什么好说的. 屏幕无坏点无烧屏, 运气还算不错. 附赠一条 Type-C, 一张钢化膜, 一个硅胶壳. 这其实是用了一段时间了.由于这东西的背面是指纹收集器, 所以刚拿到手的时候背面就已经惨不忍睹.正面没有工具我也懒得去贴那张钢化膜了. 系统其实原生的 LG 系统就很接近原生, 只是当时还是 Android 9, 我还是比较希望到 10, 但是后来还是发现 LOS 非官方版的 Android 10 有问题, wifi 有概率会无法启动, 所以只能刷着 Android 9. 按照 xda 上面的帖子, 一步步按照教程来做, 刷入的时候没什么大问题, 只要记得该清的东西都清掉就好. 顺带一提, 因为这个机子店家帮我解锁好了 Bootloader, 所以开机的时候会出现一个警告页面. 然后我试了好一会儿才知道怎么进 recovery. 我一开始是刷了 LOS17, 也就是 Android 10 版本的 LOS, 指引在这里. 刷完之后很不幸地我遇到了他们一直在烦恼的有些人 wifi 无法使用的问题, 于是只能刷回 Android 9 版本的 LOS 16. 然后就遇到了摄像头无法启动的问题. 无论是自带的还是 Google play 里下载的打开之后摄像头都是黑的. 找了好久终于在 xda 里找到了解决方法. 按照流程走, 总算是打开了这东西的摄像头. 软件LOS 中没有 Google 相关的软件, Google 的那个框架和应用商店都没有, 所以还需要安装 open Gapp 的包. 然后就是代理. 既然这东西要砍口垒, 那么代理就是必不可少的. 其实安卓和 iOS 代理软件遇到的共同问题就是, 可能会因为两个系统的内存清理机制而被杀掉进程, 进程被杀了代理自然也就断了. 所以当你的机器占用很高很卡的时候有可能会出现代理断掉的情况. Android 这边的解决方法之一就是将代理软件转成系统程序. 这个操作可以用 Magisk 中的 App Systemizer 来实现. 在 Magisk 中安装上述模块, 然后选一款终端软件(比方说 Termux 之类的), 输入如下命令. susystemize 然后按照提示操作即可. 列出所有应用, 输入代理应用(当然, 其他应用也可以用这种方法变为系统应用)的编号, 选择储存路径, 这样就可以将代理软件变为系统程序. 然后按照提示退出. 之后就尽情体验一下 Android 的生态吧. 对我来说首先要安装的肯定是 Tele…不是, 是 Ehv…也不对, 是 Kcanotify 泥潭魔改版! 能砍口垒了之后就能做一些骚操作比方说一边看剧一边肝船什么的, 毕竟 iPhone 现在好像还没有分屏这种东西. 当然在我买这手机的时候, Telegram 被封禁的频道还不能在 iOS 上看, 所以还是有必要装的. 当然 EHviewer 是 Android 独占对吧? 大家都懂的(逃 使用感想写这篇文章的时候用了也有三个多快四个月了. 确实是比之前我用的那个沙雕荣耀要开心多了. 起码别人能在安卓上的我差不多有都能做, 日常砍口垒看本子什么的也完全没有问题. 不过除此以外我要用安卓的地方也不多就是了. 其他日常我还是喜欢用 iPhone 的 ( 续航其实不算特别好, 标称 3300 mAh 的电池只剩下了 2800+ mAh(用 AccuBattery 测出来的), 所以看什么时候续航开始尿崩的时候就考虑去换一个电池比较好. 好在电池还是好买的, 淘宝上三十左右就有. 然后就是单手操作者的怨念, 虽然这是我的第一个类全面屏设备, 但是我还是觉得太太太太大了这屏幕. 并且这东西的指纹识别和电源键是同一个按键, 用的我很不习惯. 毕竟 iPhone 有 home 键和 电源键两个可以唤醒屏幕. 不过我又发现微软启动器可以设置双击唤醒和锁屏, 于是就习惯了. 我觉得这个功能反而比 iPhone 的要好, 而且我也不是很喜欢抬手亮屏这个功能, 还是双击比较爽. 后记其实这篇文章比较水, 关键是我也不知道有什么好写的, 所以只能写点感想之类东西. 疫病期间, 买的手柄还没到所以不能玩冰原, 只能群星和下棋作乐, 偶尔提起精神来码码字, 总算是发出了这篇文章.","categories":[{"name":"产品体验","slug":"产品体验","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"},{"name":"手机","slug":"产品体验/手机","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E6%89%8B%E6%9C%BA/"}],"tags":[{"name":"Phone","slug":"Phone","permalink":"https://blog.rekidunois.cc/tags/Phone/"},{"name":"LG","slug":"LG","permalink":"https://blog.rekidunois.cc/tags/LG/"},{"name":"835","slug":"835","permalink":"https://blog.rekidunois.cc/tags/835/"},{"name":"二手","slug":"二手","permalink":"https://blog.rekidunois.cc/tags/%E4%BA%8C%E6%89%8B/"},{"name":"Android","slug":"Android","permalink":"https://blog.rekidunois.cc/tags/Android/"}]},{"title":"码农的毕业笔记本——Y9000X","slug":"y9000x-Reviews","date":"2020-01-24T16:00:00.000Z","updated":"2020-06-28T09:34:01.586Z","comments":true,"path":"2020/01/y9000x-Reviews/","link":"","permalink":"https://blog.rekidunois.cc/2020/01/y9000x-Reviews/","excerpt":"","text":"轻薄, 标压, 性能, “我的对手很少”, 但是几乎没人能打得过我 笔记本电脑绝对是 PC 工业史上的一颗璀璨明珠. 计算机从最开始占地一个房间, 到可以摆在桌面上, 到可以塞到手提袋里随时拿走, 这样的发展历程已经过去了几十年. 当影视作品中表现一个人在“工作”的时候, 笔记本电脑也是高概率会出现的道具之一. 很长一段时间, 我已经接受了这样的设定：想要轻薄, 性能就不高；想要高性能, 笔记本就会很厚重, 并且续航很低. 如果你又要轻薄, 又要高续航, 还需要高性能？请选择火星牌笔记本（雾） 但是其实这些需求中, “高性能”这一项对于每个人的定义可能都是不同的. 如果你要玩游戏, 或者机器学习什么的, 你可能需要一个比较强的 GPU, 不过对于我来说, 我只希望写代码的时候 IDE 能反应快一点, 开浏览器的时候能多开几十个标签页, 然后编译的时候花的时间能少一点而已. 对, 我可能只需要一颗强壮的 CPU. 只是市面上其实很少有这种只偏重 CPU 的产品. 如果选择一款搭载标压移动版 CPU 的笔记本, 第一它会非常厚重, 第二它的散热还需要兼顾 GPU. 而且在我选购游戏本的那个时代, 其实 16G 的内存和大号 SSD 其实非常的不普及, 特别是 NVMe 的 SSD. 所以在日常使用中其实这类游戏本的体验, 只能说是差强人意. 如果我要稍微兼顾一点便携性, 比方说过年的时候带回老家, 就会非常痛苦. 我一个朋友甚至因为带游戏本回家把背包都背得开裂了. 那么, 有没有这么一款有强劲的 CPU 性能, 没有独显, 然后可以做到非常轻薄的笔记本呢？答案已经写在标题里了, 那就是联想出品的 Y9000X. 基本配置CPU 最高可以选配 i9-9880H, 我手上这款是i7-9750H. 显卡则使用的集成显卡, 没有独显. 内存最高可选配 32G 双通道版本. 但是这款机型的所有显卡都是焊在主板上的, 并且没有额外的内存插槽, 所以无法自行升级内存. 但是这款机型的最低配也是 16G 起步, 一般来说是比较足够. 但是即使加钱到 32G 也不贵, 只是必须和 4k UHD 屏幕一起买就是了. 储存设备方面, 它只有一块 SSD, 我手上的是来自三星的 1T NVMe SSD. 最高可选配 2T 版本. 作为一个笔记本来说, 这个大小应该是够用的. 如果有大量冷数据或者视频之类的, 建议考虑储存在 NAS 或者网盘中可能会比较合适. 如果还是觉得不够, 机器搭配了一个 M2 接口以供用户自行添加硬盘. 应该是我用过的最好的硬盘了? 屏幕可以选择 1080P 或者 4k 分辨率的两个版本. 我选择了 1080P 版本, 其实稍微有点后悔, 不过也还好. 这块屏幕给人的感觉还是不错的, 亮度很高. 拍照技术不好, 不知道能不能看出来 IO 接口方面, 它提供了两个 USB 3.1 Type-A 接口, 其中一个支持关机充电. 只是这两个接口都位于机身的后面, 屁股的位置上. 所以要插拔不是很容易, 我平时都是用来插诸如无线鼠标一类的设备. 左边那个是罗技 G304 的接收器, 右边那个有电池标志的接口是支持关机充电的.但是平时没啥用, 所以拿个塞子塞住 然后在她的右边还有（非常先进的）3.5mm 耳机孔, 还附带一个读卡器, 这应该能方便摄影师朋友们导出摄影素材. 左边它提供了轻薄本必备的雷电3接口, 而且还有两个. 这两个接口共享 40Gbps 的带宽. 当然如果你只用其中一个, 也可以独享 40Gbps 的带宽, 因为一般我们会需要一个 Type-C 接口来充电. 不然的话可能会让单个 Dock 非常烫. Y9000X 搭载的是全尺寸的键盘, 除了有小键盘以外, 还有尺寸正常的方向键, 而不是通常的那种将上下压缩得很小的方向键. 只是我感觉键盘似乎偏上了一点, 下方的距离非常开阔, 导致打字如果带了手表或者手环, 下方会顶着这个东西, 可能不是很舒服. 手臂吊起来打字又会很累. 键盘手感还算可以, 和机身的金属质感很搭. 我个人比较喜欢她亲戚隔壁 ThinkPad 的手感, 但是如果要打比方的话, 这个东西有点像机械里的茶轴, 然后 ThinkPad 的键盘有点像红轴. 电源键同时也是指纹识别配件, 可以搭配 Windows 10 的 Windows hello 使用. 触控板中规中矩, 是一整块的状态, 但是不像 MacBook 一样到处都可以按压, 属于那种隐藏式的左右键按压. 本机搭载的摄像头是那种位于屏幕下方的鼻孔摄像头, 但是联想很贴心地为它配备了物理开关. 这一点在 ThinkPad 系列似乎也成了标配, 应该得到鼓励. 由于没有搭载独显, 也没有奇奇怪怪的认证, 所以这台机器的 C 面非常干净. 拿到手的时候只有两个贴纸, 而且由于采用的是金属磨砂材质, 这些贴纸撕起来也非常轻松, 并且不会留下什么痕迹. 对于强迫症来说是非常舒服的事情. 性能这台机器的一大卖点是, 只搭载标压移动 U 的情况下, 还为其配备了四个散热风扇, 散热用料非常足.(于是声音也非常大, 简直起飞). 随手跑了一下 CeniBench, 得分居然比 7700K 还要高 16G 双通内存还是很爽的, 减少访问虚拟内存的频率那就能减少卡顿. 频率 2667 (咦不应该是2666嘛), 不知道能不能艹一艹到 3200 (逃 使用感想 便携 这篇文章从我买 Y9000X 开始, 大概是十一月份左右, 到现在一月份, 担任主力开发机两个半月. 除了丢在公司写代码以外, 偶尔也会蹭了公司网下载的东西然后拿回家里去. 这一点我就发现她是真的占地方小而且轻啊. 如果我不嫌插线拔线麻烦甚至可以一直拿着这个东西上下班通勤, 不管是坐公共交通还是骑自行车, 我觉得带着都不成问题. 发热 热嘛确实是热. 不过在键盘区域感受不是很大. 电源非常热, 这个 95W 的电源烫的要死, 而且还不好带. 但是市面上所售这个功率的 PD 充电头其实并不多, 我看唯一适合便携的似乎是苹果的那个新 16 寸 Macbook Pro 用的充电插头. 但是那个要小六百块钱了, emmm 贫穷它缠绕着我. 续航 开着高性能但是还是用电池的时候这 CPU 还在疯狂睿频到 4.0 左右, 于是续航就尿崩, 大概一两个小时左右. 然后开了节能和节电模式之后能续到四个小时左右, 在高铁上玩一路大概没啥问题? (而且高铁上还都有插座). 除此以外我似乎没有啥需要脱离电源使用的情况了. 总结使用 Y9000X 也快三个月了. 上一个使用的笔记本是我拿来当台式机用的神船 Z6, 使用三个月的时候我应该刚开始大学生活. 而距离那时已经过去了四年多了, 笔记本这一产品在我看来也有了相当程度的变化. 特别是 SSD 以及内存颗粒价格的降低, 将所有类型笔记本性能都增加到了非常高的一个高度. Y9000X 在这三个月里已经基本覆盖了我所有的使用场景, 工作的时候用来写代码, 然后团建的时候带出去旅游, 春节回家带着她坐火车, 都没有什么大问题. 如果说一定要购买的配件, 那我觉得可能需要一个显卡坞和一块1660super放在老家里, 这样我现在也能快乐冰原了(逃","categories":[{"name":"产品体验","slug":"产品体验","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"},{"name":"笔记本","slug":"产品体验/笔记本","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E7%AC%94%E8%AE%B0%E6%9C%AC/"}],"tags":[{"name":"Laptop","slug":"Laptop","permalink":"https://blog.rekidunois.cc/tags/Laptop/"},{"name":"Lenovo","slug":"Lenovo","permalink":"https://blog.rekidunois.cc/tags/Lenovo/"},{"name":"Intel","slug":"Intel","permalink":"https://blog.rekidunois.cc/tags/Intel/"},{"name":"Coding","slug":"Coding","permalink":"https://blog.rekidunois.cc/tags/Coding/"}]},{"title":"2019~2020(己亥年~庚子年)新年假期","slug":"Lunar-New-Year-Plan","date":"2020-01-16T16:00:00.000Z","updated":"2020-06-28T09:33:28.323Z","comments":true,"path":"2020/01/Lunar-New-Year-Plan/","link":"","permalink":"https://blog.rekidunois.cc/2020/01/Lunar-New-Year-Plan/","excerpt":"","text":"新年明けましておめでとうございます 碎碎念马上就要新年啦~~. 新房子也基本搞定了, 新年之前的版本也基本没什么大问题了. 于是还是希望在自己正式工作之后的第一个春节能有充实的生活. 说是春节, 其实基本算是最长的假期了. 除了过春节以外, 还是有相当多的个人时间. 如果能利用这些时间做一些平时一直找不到时间做的事情也不错吧. 于是就想出了这个东西. 因为回家带的电脑没啥 GPU 性能, 所以也最多就能下下棋什么的. (不然我好想肝冰原啊!!!) 所以这次回去的主要目标就是要做用这本 Y9000X 能够完成的事情. 博客更新editing里面已经积了一大堆想要写但是没写完的东西了, 所以终于有时间好好写写博客. 希望能有所更新吧! Y9000X 的使用报告 LG-G30 的折腾记录 关于作品中出现的专业知识相关的想法 沙雕 QT 的吐槽 2008年和2018年的回顾总结 2008年 2018年 代码库最近发现程序员要提升效率最好的办法, 其实就是所谓的 “时间魔法”——让过去的自己来帮自己完成工作. 说人话就是 “代码复用” 啦. 为此程序员其实要多积累自己的代码, 并且将其封装成易于使用的库, 需要的时候就大胆的 new 或者注入, 是坠吼的. QT 的控件继承提升用类框架 Windows 的常用 API 的封装计划 wifi 相关 硬件信息相关 系统配置相关 命令行操作 让 C# 也能自由地使用吧! COM C# 的依赖库 nuget包 复用前面提到了复用, 这却并非是想要做就能做到的事情, 需要对代码设计下大量的功夫. 现在我对 C++ 和 C# 还有 TypeScript 的了解还相当不够深入. 有很多特性都没用到, 还是要加强这方面的学习. 继承 多态 泛型 (所以到底如何快速地在需要大量的 switch 或者 if-else 的逻辑中随时扩展功能呢, 在线等, 急) 框架UI 方面还是希望能系统学习一下 WPF, 特别是 XAML 的用法. 然后非常重要的就是依赖注入啦. Asp.net Core 有自带的我曾经使用过一段时间, WPF 或者 UWP 或者 Win32 应用自带的是肯定没有的. 于是这里就要用到 AutoFac 啦. 首先是可以为没有自带的开发框架带来依赖注入这样的好东西. 其次, 即使是自带依赖注入功能的框架, 也能通过用同一个库来提高统一性, 减少需要学习的东西. 最后, 如果从零开始一个项目, 不管什么项目一定是有通用的东西. 可以对这方面作出总结, 并且在工作中应用. 用 AutoFac 来学习如何对项目进行规划 学习如何使用 XAML 来对单页进行布局吧 总结在项目中一定会使用到的代码并试着做成静态库吧 长假之后新的一年当然想做的事情有很多很多. 上面说的事情肯定一个长假做不完. 但是长假之后还有长假之后才能做的事情, 这里也稍微列一下. 冰原通关!! 检查牙齿, 比方说洗牙之类的. 全面的身体检查 买新桌子和椅子, 对自己的桌面空间进行重新设计 显示器支架 藏线和放游戏机用的桌上架子 主机架 修显示器 总结写着写着就写了好大一堆. 感觉肯定不是一个长假就能做完的事情. 嘛新的一年也是需要计划的吧, 可以丢到新年计划中. 那么, 就是这样, 给自己拜年啦~","categories":[{"name":"计划","slug":"计划","permalink":"https://blog.rekidunois.cc/categories/%E8%AE%A1%E5%88%92/"},{"name":"进度","slug":"计划/进度","permalink":"https://blog.rekidunois.cc/categories/%E8%AE%A1%E5%88%92/%E8%BF%9B%E5%BA%A6/"}],"tags":[{"name":"Plan","slug":"Plan","permalink":"https://blog.rekidunois.cc/tags/Plan/"},{"name":"Lunar New Year","slug":"Lunar-New-Year","permalink":"https://blog.rekidunois.cc/tags/Lunar-New-Year/"}]},{"title":"倍思屏幕灯简单体验","slug":"Baseus-i-wok-Screen-Hanging-Light-Reviews","date":"2019-12-08T16:00:00.000Z","updated":"2020-06-28T09:32:43.567Z","comments":true,"path":"2019/12/Baseus-i-wok-Screen-Hanging-Light-Reviews/","link":"","permalink":"https://blog.rekidunois.cc/2019/12/Baseus-i-wok-Screen-Hanging-Light-Reviews/","excerpt":"","text":"明基, 我叫你一声你敢答应嘛？ 超级简短的体验嗯，灵车群看见的一个小玩意, 原价 168￥ 领券入手 118￥. 其实也算不上灵车, 至少没有那块 HP 的垃圾板子灵. 之前一直用的是大学时候买的三十块不到的磁吸吊灯, 实际上就是一条 LED 灯条带了金属外壳里面放俩磁铁. 照明效果先不说, 一直会照到我的眼睛, 很刺眼. 之前看少数派他们推荐了不止一次明基的那个屏幕灯, 知道了这类东西的存在. 当然, 明基的那款灯还是买不起的. 效果我也没感觉, 也不敢说倍思这个就比明基的好. (虽然我感觉我会感觉不出来两者的区别) 安装方式很简单, 有一条横臂放在屏幕上,然后后面有一个可活动的配重块, 抵住屏幕的背面让整个灯保持平衡. 然后灯的部分可以调整角度, 我调了一个既不会照到眼睛, 又不会让屏幕反光太严重的角度. 可以调成适合睡眠的黄色灯光, 按一下默认是白光, 再按一下就是黄光了. 很舒服, 旋钮可以调整光照强度. 屏幕倒是另一回事, 起码我桌面这里光照非常舒服. 不过这东西没有什么 App 可以接入, 要控制只能去控制物理开关, 如果屏幕晃动比较大可能会有点不好的体验. 当然, 这可能是我之后要努力的方向, 最终整个桌面都要焕然一新! 一点碎碎念最近阿秋跑来我司实习了, 然后实习的时候顺便就住我家, 本来一个人相当宽敞的单间瞬间就觉得太窄了. 而且可怜的阿秋还得用睡袋躺在地上. 等他课上完了全职实习的时候, 我俩打算找个两房的房子租. 那时候我再继续考虑弄弄桌子之类的. 顺便, 也终于要让我那个坏掉的 2k 屏看看能不能重获新生了.","categories":[{"name":"产品体验","slug":"产品体验","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"},{"name":"桌面","slug":"产品体验/桌面","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E6%A1%8C%E9%9D%A2/"}],"tags":[{"name":"小件产品","slug":"小件产品","permalink":"https://blog.rekidunois.cc/tags/%E5%B0%8F%E4%BB%B6%E4%BA%A7%E5%93%81/"},{"name":"屏幕灯","slug":"屏幕灯","permalink":"https://blog.rekidunois.cc/tags/%E5%B1%8F%E5%B9%95%E7%81%AF/"},{"name":"倍思","slug":"倍思","permalink":"https://blog.rekidunois.cc/tags/%E5%80%8D%E6%80%9D/"},{"name":"桌面","slug":"桌面","permalink":"https://blog.rekidunois.cc/tags/%E6%A1%8C%E9%9D%A2/"}]},{"title":"我的优秀 RSS 体验折腾记录","slug":"rss-ttrss-https","date":"2019-11-11T16:00:00.000Z","updated":"2020-06-28T09:33:49.343Z","comments":true,"path":"2019/11/rss-ttrss-https/","link":"","permalink":"https://blog.rekidunois.cc/2019/11/rss-ttrss-https/","excerpt":"","text":"RSS 是目前为止数字屏幕上最优秀的信息阅读方式之一 自从发现 RSSHub 这个优秀的项目之后, 我就开始琢磨如何同时在 Windows 和 IOS 手机上获得优秀的 RSS 体验, 同时也是为了远离 Windows 端糟糕的微博和知乎前端. 使用 RssHub 生成 Rss 订阅地址Rss 与 RssHub 的一点想法由于 RSS 会让内容生产者的主站流量损失, 由于 RSS Feed 中无法投放广告为内容生产者产生收益, 由于内容生产者选择依附于强大的平台, 在闭环的生态环境中发布内容, 由于…RSS “死掉”的原因实在是数不胜数. 自从2013年 Google Reader 被关闭之后, 各家互联网厂商都开始倾向于搭建属于自己的 App 的生态闭环. 你会发现当你在手机上使用微信和 QQ 的时候, 里面的内容(比方说图片)几乎无法分享给其他的 App, 公众号中的文章也不允许添加其他的外部链接, 微信内置的浏览器也会按照腾讯自身的商业需要–而不是一些正常的正当理由–来封禁内容的传播. 比方说在微信中不允许查看其他 IM 软件的链接, 带头封禁官方都没有封禁的 996.icu 网站.(一起这么做的还有 360 手机浏览器等国产套壳产品) 对于读者和内容生产者来说, 这样的阅读环境和生产环境显然不能算优秀, 甚至根本就不及格. 无奈国内还是有许多平台上有优秀的内容产出中. 毕竟不是谁都有耐心去研究怎么建站(即使到今天, 建站已经完全没有了技术含量). 在许多内容都没有官方提供的 RSS 订阅源时, 由来自 B 站的前端工程师, 知名女装偶像 @DiyGod 发起了 RssHub 项目, 旨在为没有官方 RSS 源的平台生成 RSS Feed. 截止到今天, 已经能够生成诸如微博, bilibili, 知乎, 豆瓣等大部分主流平台的 RSS Feed. 也有诸如广州市停水通知这样的针对性通知的 RSS Feed 可以生成. 基本上我所接触的所有信息都能找到办法通过 RSS 的方式订阅, RssHub, yes! 开始学习使用 RssHubRssHub 的代码在 GitHub 上开源. 而文档中也介绍了 RssHub 的基本使用方式. 但是为了规避平台的反爬机制, @DiyGod 推荐我们自己部署 RssHub 实例. 文档中也有 RssHub 的部署方法. 我这里选择的是最 Noob 的部署方法–使用 Heroku 进行部署. Diygod 已经为 RssHub 做了直接在 Heroku 上部署的链接, 只要点击这个链接, 注册账号并登录就可以直接启动一个你自己的 RssHub 实例. Heroku 的每个账号能每个月有差不多400个小时的免费实例运行时间, 如果你愿意绑定一张信用卡, 这个时间就会增至1000个小时(具体时间我记得不是很清楚, 请登录官方网站查询). 基本来说绑定了信用卡, 就可以在 Heroku 免费运行 RssHub 实例一整个月. 部署成功之后, 我们还希望在 RssHub 项目代码进行更新之后同步这一更新. 这里可以先把主仓库的代码 fork 一份到自己账号下, 然后在自己的 repo 里设置 WebHook(毕竟你又不能让 Diygod 帮每个人弄钩子), 当自己的项目 repo 更新之后, 就触发 Heroku 实例的更新, 然后在网页上创建从主仓库到自己仓库的 pull request 来更新代码. 这样就可以保证自己建立的 Rsshub 能够得到更新, 修复 bug 和添加新功能. Heroku 的实例创建之后会自动生成一个链接供用户使用, 类似于 scboy.taobao.com 这样的链接. 然而, 你完全可以使用你自己的域名, 只需要在网页上做几个设置就好了. 首先, 在你的域名解析服务提供商处添加额外的域名解析服务. 比如说, 添加 rsshub 解析记录, 设置为指向原 Heroku 提供链接的 CNAME 记录, 这样就可以使用你自己的域名访问 RssHub 实例啦! 使用 ttrss 持续抓取 rss 并阅读Rss 阅读器有个问题, 如果你的客户端不在线的时候, 你是没法接到 Rss 订阅源的更新的. 然后 Rss 并不会一直保留推送的文章, 如果时间久了新的文章就会把旧文章挤掉. 这样的话有可能会错过推送. 解决方法就是, 保持你的客户端7*24小时在线, 这样就不会漏掉任何一篇 Rss 推送的文章. 单靠本地阅读器显然是做不到的. 这里就需要 ttrss 出场了. 特别感谢 @HenryQW 瑰宝打造了 Awesome TTRSS 这个 ttrss 解决方案, 让我们可以非常容易地部署自己的 ttrss 实例 ttrss是一款基于 PHP 的免费开源 RSS 聚合阅读器。🐋 Awesome TTRSS 旨在提供一个 「一站式容器化」 的 Tiny Tiny RSS 解决方案，通过提供简易的部署方式以及一些额外插件，以提升用户体验。 部署 ttrss 非常方便, 直接使用 @HenryQW 编写的 docker-compose.yml 即可部署 ttrss 及其依赖. 比如 PostgreSQL 数据库和其他插件. 部署方式这里我直接引用文档说明: 步骤 下载 docker-compose.yml 至任意目录。 更改 docker-compose.yml 中的设置，请务必更改 postgres 用户密码。 通过终端在同目录下运行 docker-compose up -d 后等待部署完成。 默认通过 181 端口访问 TTRSS，默认账户：admin 密码：password，请第一时间更改。 wangqiru/mercury-parser-api 及 wangqiru/opencc-api-server 为支持高级功能而加入的可选服务类容器，删除不会影响 TTRSS 基础功能。 按照步骤部署之后, 应该可以直接使用你主机公网 IP:181 的方式访问 ttrss. 但这还远远不够. 绑定域名, 使用 https自己部署的 ttrss 还需要在 nginx 上设置域名, 才能使用域名来访问 ttrss 服务. 我使用 Let&#39;s Encrypt 获取免费的 https 证书。它不但为人们提供免费的证书，还提供了一个可以傻瓜式生成证书并修改 nginx 配置的 bot。进入它的官网，点击 Get Started，根据提示操作，即使是新手也能轻松使用 certbot 来将你的站点变为 https 站点。在使用时输入你的域名，在服务器这边关于域名的配置就已经成功了。 但是这时候你还需要一个域名解析服务。我推荐 CloudeFlare 的域名解析服务。他们还能为你的域名提供一个免费（聊胜于无）的 CDN 服务。我已经将这个博客、我的 rsshub 实例和我的 ttrss 实例都放到了 cf 上解析。 ttrss 实例应该设置为 Type A，Name 应该是 www 或者其他你想要的东西，比方说 ttrss.example.com 的网址，Name 就应该是 ttrss。 设置完域名解析服务后你还可以顺手打开 SSL/TLS 加密。关于这个我也不是很懂，我尝试过 Flexible 和 Full，在我的服务端配置下似乎都能正常使用。 操作完成之后，我的 ttrss 站点检测结果如下： 现在，ttrss 站点可以正常使用了！ 在手机上使用安卓上我不知道什么 rss 阅读器好用，而且还要支持 ttrss 账号。在 IOS 设备上，我使用 Reeder 来查看 rss 订阅。Awesome-TTRSS 中已经内置了 Fever 插件，只要在设置中开启即可。当然，别忘记在设置中选中 允许外部客户端通过 API 来访问该账户，这样才能让 Reeder 访问你的 ttrss 实例。 阅读效果相当舒服，还能在网页版和手机端之间同步阅读记录。这样在地铁上读过的文章你就不会在网页端发现它还是未读状态了。 总结有一个比较遗憾的地方就是在 Windows 上我没有发现合适的可以使用 ttrss 同步的 rss 阅读器，所以在 Windows 端应该还是要用网页版来阅读 ttrss 文章。但总的来说我现在使用 rss 获取信息的方式让我非常满意。 后记这篇文章从八月份开始一直到十一月才写完。中间这段时间我的工作也是慢慢变得多了起来，所以一直很忙也没时间写任何东西。但还好，我觉得我写博客的热情还没有被消磨掉。这段时间我买了二手的 LG G30 和联想拯救者 Y9000X，之后可能有时间会写一下这两个产品的使用体验。","categories":[{"name":"使用方法","slug":"使用方法","permalink":"https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"},{"name":"Web 端开发","slug":"使用方法/Web-端开发","permalink":"https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Web-%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"RSS","slug":"RSS","permalink":"https://blog.rekidunois.cc/tags/RSS/"},{"name":"TTRSS","slug":"TTRSS","permalink":"https://blog.rekidunois.cc/tags/TTRSS/"},{"name":"HTTPS","slug":"HTTPS","permalink":"https://blog.rekidunois.cc/tags/HTTPS/"},{"name":"Docker","slug":"Docker","permalink":"https://blog.rekidunois.cc/tags/Docker/"},{"name":"Fever","slug":"Fever","permalink":"https://blog.rekidunois.cc/tags/Fever/"},{"name":"Reeder","slug":"Reeder","permalink":"https://blog.rekidunois.cc/tags/Reeder/"}]},{"title":"咸鱼 Ingress 玩家的两次 IFS 之旅","slug":"Ingress-IFS","date":"2019-08-10T16:00:00.000Z","updated":"2020-06-28T09:33:10.245Z","comments":true,"path":"2019/08/Ingress-IFS/","link":"","permalink":"https://blog.rekidunois.cc/2019/08/Ingress-IFS/","excerpt":"","text":"IFS 是 Ingress First Saturday 的缩写 Ingress 是一款让我感到很神奇的游戏。一方面她的游戏玩法其实比较单调，但另一方面她可能会让你投入与其他游戏截然不同的东西，自然，收获也是截然不同的。 Ingress 社区每个月都会有一次活动，这项活动旨在帮助新入坑的玩家更快地了解这款游戏，并且升级。这项活动由玩家申请，以城市为单位举行。参加活动的玩家在活动规定的2个小时内，获取到的 AP (即该游戏中类似经验的数值)在活动结束后会有一个双倍时间的奖励。在活动开始之前玩家需要对签到 Po 进行 Hack，并向所属阵营的 POC 进行签到。POC 会在签到时记录玩家等级、行动距离、AP 数等数据，在活动结束后，玩家再次向 POC 签退，以便 POC 统计活动时间内玩家取得的成绩。 玩家需要在活动时间内 Hack 任意两个 Po，并在两次 Hack 之间取得至少5000点的 AP 点数。但是活动时双方阵营的玩家都在现场，基本上是一直可以刷 AP 的状态。一方阵营装上了脚，另一方马上炸掉并装上自己阵营的脚，如此反复。确实诚如 IFS 活动介绍所言，即使是新人也可以很容易地在这个活动中刷出大量的 AP。 7月份的 IFS 是我第一次参加的 Ingress 活动，甚至是我第一次参加游戏相关的线下活动。活动下午三点开始，那天天气特别的热，我在做完活动任务之后就回到集合地点的星巴克坐着刷 AP 了。而其实 IFS 也可以在签到后去别的地方刷 AP，不管是拉多重还是其他的行动都可以。不过那天实在是太热了，很多人都选择坐在星巴克聊天。但也有人能在沙发上刷了20几万 AP，真实沙发战神。 活动不留点纪念品怎么能行呢？深圳的 IFS 一般是有两个地方同时举行，方便在深圳不同地方的玩家参与，于是 Bio Card 就一式两份。两个月的 Bio Card 设计都非常精美，非常契合活动选址的地方。侨城东+深圳北是7月的两个地址，所以 Bio Card 就在背面设计了与方位有关的指南针图案。而8月的两个地点刚好都是深圳地铁1号线和3号线的交汇处，而这两条地铁线的颜色刚好是 Ingress 里两个阵营的代表色——蓝色和绿色，于是 Bio Card 的设计就是在两张卡面上画出两个地点的地铁路线的形状，并且两张卡还能拼接在一起。 中间的几张人物卡是官方的动画中出现的人物，而左右两边的卡都是官方推出的类似于宣传广告一样的 Bio Card。然后左边的这张卡背面还附赠了一个可以用于兑换游戏内的道具的 Code。不过我印象中只有8月份的 IFS 遇到了官方人员就是了。 有许多资深玩家会印制自己的 Bio Card, 相当于是给自己与 Ingress 相关的身份做了一张名片，而玩家们也会互相交换来认识彼此。看以后有机会我自己也去做一些，不知道有没有人要（ 如果不是 Ingress，我来到深圳之后出门的理由真的是屈指可数。毕竟我自己一个人在家就能过整个黄金周乃至整个暑假，完全不会觉得无聊。但是当入坑 Ingress 之后，我就变得非常期待每个月 IFS 的时候出门活动了。而且每周三下午本来公司组织大家去打球，我也在规划每周的这天出去摸任务。当然最近的天气对于户外活动过于不友好，每次出门都感觉和洗热水澡一样，可能只有晚上比较适合出门摸一摸 Po 了。 一点关于 Ingress 的思考在 Ingress 之前我所接触的手机游戏，要么都是抽卡游戏并且占用你的时间，也就是当我想要打发时间不想动脑的时候去玩；要么就是有音游因素的游戏。我的想法是这些游戏其实从承载平台的角度来看，其实没有什么值得称道的地方。认为智能手机的出现是对个人电脑的一种改朝换代的革新的人们，在游戏这个领域总是说手游的营收远超传统单机类的游戏，也超过了 PC 端游。可问题在于，所有这些营收爆表的游戏，几乎都可以在 PC 上玩。使用手柄来操作也是非常适合，甚至比触摸屏更好。甚至其中的一些操作，基本就是在触摸屏上对手柄键位的镜像，以至于针对这些游戏还出现了一种把游戏手柄按键放在触摸屏上的外设。 也就是说，这些爆款手游，都没有在游戏玩法层面上，突破原本的游戏平台的束缚。主机使用手柄作为操作工具，这一标准发展到今天依旧富有生命力。而等游戏出现在 PC 之后，键盘和鼠标作为操作方式又为竞技类游戏发展出了新的一片天地：FPS、RTS和MOBA是很难用手柄抗衡键鼠的。甚至在 OSU 这个游戏中还出现了键盘+触控板的组合。PC 游戏有能力在游戏发展史上划上浓墨重彩的一笔也是这个原因，它扩展了游戏的种类，丰富了她的玩法。而手游如果想要在历史上留下属于自己的一笔，势必要依靠与手柄和键鼠都不同的人机交互方式，来扩展属于自己的游戏种类和玩法。而 Ingress，以及同一个公司出品的 Pokemon GO，还有微软即将推出的我的世界 AR 游戏，就属于扩展游戏种类的先驱者。他们找到了智能手机的独特之处，并希望在游戏中充分发挥这些特点。这样的游戏才能在游戏史上拥有自己的一席之地。 从主机的发展历史来看，平台的设计者如何设计自己的平台，对于自家平台上的游戏会有相当大的影响。即使这些游戏属于第三方，交互设计依旧会在他们设计游戏的时候造成影响。手机应该也不能例外。各大手机厂商以及两个手机系统的设计公司，首先要对智能手机的人机交互做更多的完善和创新，他们要成为游戏设计厂商的引路人，向厂商揭示手机这个平台的独特性和特点。这样游戏开发者才能根据这些来设计独特的玩法，当然也不排除手机厂商亲自下场。总之，手机游戏的发展并不只是想做游戏的公司会参与其中，很多与游戏不相关的公司，也会以各种各样的方式影响到游戏的玩法。","categories":[{"name":"手机游戏","slug":"手机游戏","permalink":"https://blog.rekidunois.cc/categories/%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/"},{"name":"户外活动","slug":"手机游戏/户外活动","permalink":"https://blog.rekidunois.cc/categories/%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/%E6%88%B7%E5%A4%96%E6%B4%BB%E5%8A%A8/"}],"tags":[{"name":"Ingress","slug":"Ingress","permalink":"https://blog.rekidunois.cc/tags/Ingress/"},{"name":"IFS","slug":"IFS","permalink":"https://blog.rekidunois.cc/tags/IFS/"},{"name":"OutDoor","slug":"OutDoor","permalink":"https://blog.rekidunois.cc/tags/OutDoor/"}]},{"title":"我的 Https 之旅--GitHub Page 更换域名","slug":"Use-Https-In-GitHub-Page","date":"2019-06-29T16:00:00.000Z","updated":"2020-06-28T09:33:54.873Z","comments":true,"path":"2019/06/Use-Https-In-GitHub-Page/","link":"","permalink":"https://blog.rekidunois.cc/2019/06/Use-Https-In-GitHub-Page/","excerpt":"","text":"在GitHub Page使用自己的域名 fork原博客的时候我就发现可以通过指定 CNAME 来让 username.github.io 的url跳转到你指定的网址. 所以在咨询了朋友之后, 便决定将这个博客的域名换成自己的域名 rekidunois.cn. 首先是在仓库里创建 CNAME 文件, 在里面设定域名 blog.rekidunois.cn (后来发现其实也可以直接在sitting里设置). 之后在域名的dns服务提供商里设置域名解析. 这里我使用了cloudflare作为我的dns服务提供商. 在使用它的dns服务之前, 我们需要先去域名注册机构(比如我在腾讯云购买的域名)将 rekidunois.cn 的dns设置为cloudflare的dns, 这样cf的域名解析服务就能使用了. 添加域名解析中的CNAME记录, 将其指向 rekidunois.github.io, 这时候应该可以使用 blog.rekidunois.cn 来访问博客了. 只是我们需要在cf中做https相关设置后, 浏览器才不会将我的博客标记为不安全. 查询了一些资料之后, 我在Crypto中将SSL选项置为 Fleible 方式. 并且开启了 Always Use HTTPS 选项. 这时我发现GitHub库中的设置里还有一个选项是启用https, 我便将它勾选. 过了一段时间之后, blog.rekidunois.cn 就能够正常访问并且浏览器里出现那把锁了. 这里可能会遇到一些坑, 比方说页面中如果有一些引用的脚本, 脚本所创建的图片可能会无法加载. 博客标签页的icon也可能会无法显示. 而通过引用脚本启用的功能(如gitalk)也会出现无法加载的情况. 而如果浏览器地址栏出现了『该网站试图从不安全的来源加载脚本』(我记不清具体的表述, 反正大概是这个意思)这样的提示的话, 请不要手动让浏览器加载这些脚本, 因为这会让浏览器将你的网站标记为不安全. 总的来说这个https还算是比较简单的设置, 我甚至没有敲任何一个命令就解决了问题. 下一个目标是将部署好的ttrss完全https化. 成功之后大概也会写一篇文章来记录整个ttrss的部署历程吧.","categories":[{"name":"使用方法","slug":"使用方法","permalink":"https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"},{"name":"Web 端开发","slug":"使用方法/Web-端开发","permalink":"https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Web-%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"GitHub Page","slug":"GitHub-Page","permalink":"https://blog.rekidunois.cc/tags/GitHub-Page/"},{"name":"https","slug":"https","permalink":"https://blog.rekidunois.cc/tags/https/"},{"name":"cloudflare","slug":"cloudflare","permalink":"https://blog.rekidunois.cc/tags/cloudflare/"}]},{"title":"本地编辑 Markdown 时粘贴图片自动插入 Markdown 图片格式","slug":"MarkDown-And-VS-Code","date":"2019-06-05T16:00:00.000Z","updated":"2020-06-28T09:33:41.137Z","comments":true,"path":"2019/06/MarkDown-And-VS-Code/","link":"","permalink":"https://blog.rekidunois.cc/2019/06/MarkDown-And-VS-Code/","excerpt":"","text":"这可能是持续写整个博客的基础操作 &ensp;&ensp;&ensp;&ensp;在折腾了那么久之后, 我还是回到使用静态网页搭建博客的方式来. 毕竟markdown那么好用, 我也不舍得放下这个工具. 在步入社会开始工作之后我就发现, 即使工作的时候没有直接要求你用你觉得很好用的东西, 你也可以自己去设法使用这些你认为用起来很舒服的道具. 在折腾成功之后会有莫大的满足感, 而且日常使用也会提升工作体验, 何乐而不为. &ensp;&ensp;&ensp;&ensp;但是markdown暂时还没有能在我的工作中有所应用. 可能以后写文档能用上吧, 谁知道呢（ 那么, 简单讲一下这个博客的工作流程. 非常简单, 那就是在本地编辑markdown文件, 然后 git commit 并且push到GitHub里叫做 UserName.github.io 的库里, 这样你的新文章就会被解析并在 https://UserName.github.io 中可以访问. 之所以使用markdown, 有很多人给出了分析, 我这里就讲一点: markdown在写作的时候, 可以让你的双手几乎不离开键盘, 就完成排版和修改格式等等操作. 如果要在其他的文字工作方式中实现这一点, 就我所知可能只有ThinkPad的小红点可以做到让用户在工作的时候双手不离开键盘打字区. &ensp;&ensp;&ensp;&ensp;那么, 有一个非常现实的问题就出现了: 我写文章并不光是只有文字（太长的文字也没人看鸭）, 还需要插入图片. 在markdown中是可以很方便地插入图片, 不管是本地的图片还是图床中的图片, 都可以插入. 问题在于, 手动输入图片的url或者本地路径怎么样都不是一个舒服而且高效率的方式. 在Windows上编辑文章, 图片还是以剪贴板的复制粘贴操作来插入图片最为舒服. 所以本篇文章的意义就是在于, 如何在VS Code中配置粘贴图片自动拷贝到本地的特定目录, 并且在markdown文本中输入引用图片的格式, 让图片可以被正确地显示. 寻找工具&ensp;&ensp;&ensp;&ensp;既然是VS Code, 那么第一反应是使用插件来实现这一功能. 优秀的第三方插件支持也是VS Code得以立足于编辑器市场的重要特点. 在Google了一阵之后, 很快就发现了两款可以实现相应功能的插件: Picgo 和 Paste Image. Picgo是开源的作品, 在GitHub上也可以找到它的 repo, 但是安装后发现它重点在于如何在VS Code编辑markdown文件时, 上传图片到图床中. 既然我们决定将整个博客都放入一个GitHub repo, 那么我们似乎不是很需要上传到其他的图床里. &ensp;&ensp;&ensp;&ensp;另外一款插件Paste Image, 名字非常的直截了当, 功能也是基本能满足需求. 可以直接以快捷键的方式粘贴图片到markdown中, 通过一番设置之后, 达成了我只需要commit就可以完整更新博客文章的效果. 下面贴一下设置的方式: 放置图片的根目录. 其中变量 $&#123;projectRoot&#125; 是插件提供, 这里提供的是你blog repo在本地的绝对路径, images是想要放置所有博客图片的文件夹. 这里会有一个问题, 我们下面继续说 其实本来, 所有的图片就放在一个文件夹里是可以的. 但是这个博客的文章还是有所分类, 并不是所有都是博客文章. 比方说有一些大段的工具使用方法, 就不适合作为博客文章发出, 而应该以wiki的形式储存. 所以在这个地方对图片进行分类也是有必要的. 问题就在于, 我没有找到方法可以让我在插入图片的时候根据编辑文件所在地址来决定images文件夹中图片要放到哪个子文件夹里. 所以这里也只能先写死. 这个地方拼接的字符串就是在markdown文本中要输入的图片路径, 所以应该是相对路径而不是绝对路径, 那么 $&#123;projectRoot&#125; 这个变量就没法使用了, 毕竟输出的是绝对路径. 然后 images 也没有其他变量可以生成这个路径, 所以也只能写死… &ensp;&ensp;&ensp;&ensp;经过以上配置之后, 使用快捷键 Ctrl + Alt + v 就可以将剪贴板中的图片自动拷贝到指定路径, 并且在markdown文本中输入正确的显示字段了. 最后吐槽一下VS Code, 使用了Synax插件同步配置但是突然失效不说, 插件本身居然不告诉我没有拉取远程配置, 而是报告同步成功, 我???? 其实VS Code应该去用yaml之类的格式当配置文件的, 会舒服很多. 明天到了上班的地方还要在那里的电脑再弄一次.","categories":[{"name":"使用方法","slug":"使用方法","permalink":"https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"},{"name":"VS Code","slug":"使用方法/VS-Code","permalink":"https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/VS-Code/"}],"tags":[{"name":"VS Code","slug":"VS-Code","permalink":"https://blog.rekidunois.cc/tags/VS-Code/"},{"name":"Picgo","slug":"Picgo","permalink":"https://blog.rekidunois.cc/tags/Picgo/"},{"name":"Paste Image","slug":"Paste-Image","permalink":"https://blog.rekidunois.cc/tags/Paste-Image/"},{"name":"markdown","slug":"markdown","permalink":"https://blog.rekidunois.cc/tags/markdown/"},{"name":"github","slug":"github","permalink":"https://blog.rekidunois.cc/tags/github/"}]}],"categories":[{"name":"随笔","slug":"随笔","permalink":"https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/"},{"name":"胡言乱语","slug":"随笔/胡言乱语","permalink":"https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"},{"name":"胡言乱语","slug":"胡言乱语","permalink":"https://blog.rekidunois.cc/categories/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"},{"name":"阶段总结","slug":"胡言乱语/阶段总结","permalink":"https://blog.rekidunois.cc/categories/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"},{"name":"产品体验","slug":"产品体验","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"},{"name":"平板电脑","slug":"产品体验/平板电脑","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E5%B9%B3%E6%9D%BF%E7%94%B5%E8%84%91/"},{"name":"手机","slug":"产品体验/手机","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E6%89%8B%E6%9C%BA/"},{"name":"笔记本","slug":"产品体验/笔记本","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E7%AC%94%E8%AE%B0%E6%9C%AC/"},{"name":"计划","slug":"计划","permalink":"https://blog.rekidunois.cc/categories/%E8%AE%A1%E5%88%92/"},{"name":"进度","slug":"计划/进度","permalink":"https://blog.rekidunois.cc/categories/%E8%AE%A1%E5%88%92/%E8%BF%9B%E5%BA%A6/"},{"name":"桌面","slug":"产品体验/桌面","permalink":"https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E6%A1%8C%E9%9D%A2/"},{"name":"使用方法","slug":"使用方法","permalink":"https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"},{"name":"Web 端开发","slug":"使用方法/Web-端开发","permalink":"https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Web-%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"手机游戏","slug":"手机游戏","permalink":"https://blog.rekidunois.cc/categories/%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/"},{"name":"户外活动","slug":"手机游戏/户外活动","permalink":"https://blog.rekidunois.cc/categories/%E6%89%8B%E6%9C%BA%E6%B8%B8%E6%88%8F/%E6%88%B7%E5%A4%96%E6%B4%BB%E5%8A%A8/"},{"name":"VS Code","slug":"使用方法/VS-Code","permalink":"https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/VS-Code/"}],"tags":[{"name":"杂谈, 生活","slug":"杂谈-生活","permalink":"https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88-%E7%94%9F%E6%B4%BB/"},{"name":"杂谈, 时间, 工作, 生活","slug":"杂谈-时间-工作-生活","permalink":"https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88-%E6%97%B6%E9%97%B4-%E5%B7%A5%E4%BD%9C-%E7%94%9F%E6%B4%BB/"},{"name":"iPad","slug":"iPad","permalink":"https://blog.rekidunois.cc/tags/iPad/"},{"name":"iOS 13","slug":"iOS-13","permalink":"https://blog.rekidunois.cc/tags/iOS-13/"},{"name":"Phone","slug":"Phone","permalink":"https://blog.rekidunois.cc/tags/Phone/"},{"name":"LG","slug":"LG","permalink":"https://blog.rekidunois.cc/tags/LG/"},{"name":"835","slug":"835","permalink":"https://blog.rekidunois.cc/tags/835/"},{"name":"二手","slug":"二手","permalink":"https://blog.rekidunois.cc/tags/%E4%BA%8C%E6%89%8B/"},{"name":"Android","slug":"Android","permalink":"https://blog.rekidunois.cc/tags/Android/"},{"name":"Laptop","slug":"Laptop","permalink":"https://blog.rekidunois.cc/tags/Laptop/"},{"name":"Lenovo","slug":"Lenovo","permalink":"https://blog.rekidunois.cc/tags/Lenovo/"},{"name":"Intel","slug":"Intel","permalink":"https://blog.rekidunois.cc/tags/Intel/"},{"name":"Coding","slug":"Coding","permalink":"https://blog.rekidunois.cc/tags/Coding/"},{"name":"Plan","slug":"Plan","permalink":"https://blog.rekidunois.cc/tags/Plan/"},{"name":"Lunar New Year","slug":"Lunar-New-Year","permalink":"https://blog.rekidunois.cc/tags/Lunar-New-Year/"},{"name":"小件产品","slug":"小件产品","permalink":"https://blog.rekidunois.cc/tags/%E5%B0%8F%E4%BB%B6%E4%BA%A7%E5%93%81/"},{"name":"屏幕灯","slug":"屏幕灯","permalink":"https://blog.rekidunois.cc/tags/%E5%B1%8F%E5%B9%95%E7%81%AF/"},{"name":"倍思","slug":"倍思","permalink":"https://blog.rekidunois.cc/tags/%E5%80%8D%E6%80%9D/"},{"name":"桌面","slug":"桌面","permalink":"https://blog.rekidunois.cc/tags/%E6%A1%8C%E9%9D%A2/"},{"name":"RSS","slug":"RSS","permalink":"https://blog.rekidunois.cc/tags/RSS/"},{"name":"TTRSS","slug":"TTRSS","permalink":"https://blog.rekidunois.cc/tags/TTRSS/"},{"name":"HTTPS","slug":"HTTPS","permalink":"https://blog.rekidunois.cc/tags/HTTPS/"},{"name":"Docker","slug":"Docker","permalink":"https://blog.rekidunois.cc/tags/Docker/"},{"name":"Fever","slug":"Fever","permalink":"https://blog.rekidunois.cc/tags/Fever/"},{"name":"Reeder","slug":"Reeder","permalink":"https://blog.rekidunois.cc/tags/Reeder/"},{"name":"Ingress","slug":"Ingress","permalink":"https://blog.rekidunois.cc/tags/Ingress/"},{"name":"IFS","slug":"IFS","permalink":"https://blog.rekidunois.cc/tags/IFS/"},{"name":"OutDoor","slug":"OutDoor","permalink":"https://blog.rekidunois.cc/tags/OutDoor/"},{"name":"GitHub Page","slug":"GitHub-Page","permalink":"https://blog.rekidunois.cc/tags/GitHub-Page/"},{"name":"https","slug":"https","permalink":"https://blog.rekidunois.cc/tags/https/"},{"name":"cloudflare","slug":"cloudflare","permalink":"https://blog.rekidunois.cc/tags/cloudflare/"},{"name":"VS Code","slug":"VS-Code","permalink":"https://blog.rekidunois.cc/tags/VS-Code/"},{"name":"Picgo","slug":"Picgo","permalink":"https://blog.rekidunois.cc/tags/Picgo/"},{"name":"Paste Image","slug":"Paste-Image","permalink":"https://blog.rekidunois.cc/tags/Paste-Image/"},{"name":"markdown","slug":"markdown","permalink":"https://blog.rekidunois.cc/tags/markdown/"},{"name":"github","slug":"github","permalink":"https://blog.rekidunois.cc/tags/github/"}]}